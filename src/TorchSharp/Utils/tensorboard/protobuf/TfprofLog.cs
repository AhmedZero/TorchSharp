// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tensorboard/compat/proto/tfprof_log.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tensorboard {

  /// <summary>Holder for reflection information generated from tensorboard/compat/proto/tfprof_log.proto</summary>
  public static partial class TfprofLogReflection {

    #region Descriptor
    /// <summary>File descriptor for tensorboard/compat/proto/tfprof_log.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TfprofLogReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cil0ZW5zb3Jib2FyZC9jb21wYXQvcHJvdG8vdGZwcm9mX2xvZy5wcm90bxIL",
            "dGVuc29yYm9hcmQaKXRlbnNvcmJvYXJkL2NvbXBhdC9wcm90by9hdHRyX3Zh",
            "bHVlLnByb3RvGil0ZW5zb3Jib2FyZC9jb21wYXQvcHJvdG8vc3RlcF9zdGF0",
            "cy5wcm90byLZAQoHQ29kZURlZhIqCgZ0cmFjZXMYASADKAsyGi50ZW5zb3Ji",
            "b2FyZC5Db2RlRGVmLlRyYWNlGqEBCgVUcmFjZRIQCgRmaWxlGAEgASgJQgIY",
            "ARIPCgdmaWxlX2lkGAYgASgDEg4KBmxpbmVubxgCIAEoBRIUCghmdW5jdGlv",
            "bhgDIAEoCUICGAESEwoLZnVuY3Rpb25faWQYByABKAMSEAoEbGluZRgEIAEo",
            "CUICGAESDwoHbGluZV9pZBgIIAEoAxIXCg9mdW5jX3N0YXJ0X2xpbmUYBSAB",
            "KAUiZAoKT3BMb2dFbnRyeRIMCgRuYW1lGAEgASgJEhEKCWZsb2F0X29wcxgC",
            "IAEoAxINCgV0eXBlcxgDIAMoCRImCghjb2RlX2RlZhgEIAEoCzIULnRlbnNv",
            "cmJvYXJkLkNvZGVEZWYirAEKCk9wTG9nUHJvdG8SLAoLbG9nX2VudHJpZXMY",
            "ASADKAsyFy50ZW5zb3Jib2FyZC5PcExvZ0VudHJ5Ej0KDGlkX3RvX3N0cmlu",
            "ZxgCIAMoCzInLnRlbnNvcmJvYXJkLk9wTG9nUHJvdG8uSWRUb1N0cmluZ0Vu",
            "dHJ5GjEKD0lkVG9TdHJpbmdFbnRyeRILCgNrZXkYASABKAMSDQoFdmFsdWUY",
            "AiABKAk6AjgBIsICCgxQcm9maWxlUHJvdG8SMwoFbm9kZXMYASADKAsyJC50",
            "ZW5zb3Jib2FyZC5Qcm9maWxlUHJvdG8uTm9kZXNFbnRyeRIRCgloYXNfdHJh",
            "Y2UYAiABKAgSHwoXbWlzc19hY2NlbGVyYXRvcl9zdHJlYW0YBSABKAgSDQoF",
            "c3RlcHMYAyADKAMSPwoMaWRfdG9fc3RyaW5nGAQgAygLMikudGVuc29yYm9h",
            "cmQuUHJvZmlsZVByb3RvLklkVG9TdHJpbmdFbnRyeRpGCgpOb2Rlc0VudHJ5",
            "EgsKA2tleRgBIAEoAxInCgV2YWx1ZRgCIAEoCzIYLnRlbnNvcmJvYXJkLlBy",
            "b2ZpbGVOb2RlOgI4ARoxCg9JZFRvU3RyaW5nRW50cnkSCwoDa2V5GAEgASgD",
            "Eg0KBXZhbHVlGAIgASgJOgI4ASKSCAoLUHJvZmlsZU5vZGUSDAoEbmFtZRgB",
            "IAEoCRIKCgJvcBgJIAEoCRIKCgJpZBgNIAEoAxI0CgZpbnB1dHMYAiADKAsy",
            "JC50ZW5zb3Jib2FyZC5Qcm9maWxlTm9kZS5JbnB1dHNFbnRyeRI/CgxpbnB1",
            "dF9zaGFwZXMYECADKAsyKS50ZW5zb3Jib2FyZC5Qcm9maWxlTm9kZS5JbnB1",
            "dFNoYXBlc0VudHJ5EjYKB291dHB1dHMYAyADKAsyJS50ZW5zb3Jib2FyZC5Q",
            "cm9maWxlTm9kZS5PdXRwdXRzRW50cnkSQQoNb3V0cHV0X3NoYXBlcxgPIAMo",
            "CzIqLnRlbnNvcmJvYXJkLlByb2ZpbGVOb2RlLk91dHB1dFNoYXBlc0VudHJ5",
            "EkYKEHNyY19vdXRwdXRfaW5kZXgYDiADKAsyLC50ZW5zb3Jib2FyZC5Qcm9m",
            "aWxlTm9kZS5TcmNPdXRwdXRJbmRleEVudHJ5Eg0KBXNoYXBlGAQgAygDEhAK",
            "CG9wX3R5cGVzGAUgAygJEhgKEGNhbm9uaWNhbF9kZXZpY2UYBiABKAkSEwoL",
            "aG9zdF9kZXZpY2UYByABKAkSEQoJZmxvYXRfb3BzGAggASgDEiMKBXRyYWNl",
            "GAogASgLMhQudGVuc29yYm9hcmQuQ29kZURlZhIyCgVhdHRycxgLIAMoCzIj",
            "LnRlbnNvcmJvYXJkLlByb2ZpbGVOb2RlLkF0dHJzRW50cnkSMgoFZXhlY3MY",
            "DCADKAsyIy50ZW5zb3Jib2FyZC5Qcm9maWxlTm9kZS5FeGVjc0VudHJ5Gi0K",
            "C0lucHV0c0VudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoAzoCOAEa",
            "RgoQSW5wdXRTaGFwZXNFbnRyeRILCgNrZXkYASABKAUSIQoFdmFsdWUYAiAB",
            "KAsyEi50ZW5zb3Jib2FyZC5UdXBsZToCOAEaLgoMT3V0cHV0c0VudHJ5EgsK",
            "A2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoAzoCOAEaRwoRT3V0cHV0U2hhcGVz",
            "RW50cnkSCwoDa2V5GAEgASgFEiEKBXZhbHVlGAIgASgLMhIudGVuc29yYm9h",
            "cmQuVHVwbGU6AjgBGjUKE1NyY091dHB1dEluZGV4RW50cnkSCwoDa2V5GAEg",
            "ASgDEg0KBXZhbHVlGAIgASgFOgI4ARpECgpBdHRyc0VudHJ5EgsKA2tleRgB",
            "IAEoCRIlCgV2YWx1ZRgCIAEoCzIWLnRlbnNvcmJvYXJkLkF0dHJWYWx1ZToC",
            "OAEaRgoKRXhlY3NFbnRyeRILCgNrZXkYASABKAMSJwoFdmFsdWUYAiABKAsy",
            "GC50ZW5zb3Jib2FyZC5FeGVjUHJvZmlsZToCOAEi5wMKC0V4ZWNQcm9maWxl",
            "EhEKCXJ1bl9jb3VudBgBIAEoAxIYChBhbGxfc3RhcnRfbWljcm9zGAIgASgD",
            "EhkKEWxhdGVzdF9lbmRfbWljcm9zGAMgASgDEkkKEWFjY2VsZXJhdG9yX2V4",
            "ZWNzGAQgAygLMi4udGVuc29yYm9hcmQuRXhlY1Byb2ZpbGUuQWNjZWxlcmF0",
            "b3JFeGVjc0VudHJ5EjkKCWNwdV9leGVjcxgFIAMoCzImLnRlbnNvcmJvYXJk",
            "LkV4ZWNQcm9maWxlLkNwdUV4ZWNzRW50cnkSLQoMbWVtb3J5X2V4ZWNzGAcg",
            "AygLMhcudGVuc29yYm9hcmQuRXhlY01lbW9yeRIyCgthbGxvY2F0aW9ucxgL",
            "IAMoCzIdLnRlbnNvcmJvYXJkLkFsbG9jYXRpb25SZWNvcmQSDwoHZGV2aWNl",
            "cxgGIAMoCRpOChVBY2NlbGVyYXRvckV4ZWNzRW50cnkSCwoDa2V5GAEgASgJ",
            "EiQKBXZhbHVlGAIgASgLMhUudGVuc29yYm9hcmQuRXhlY1RpbWU6AjgBGkYK",
            "DUNwdUV4ZWNzRW50cnkSCwoDa2V5GAEgASgJEiQKBXZhbHVlGAIgASgLMhUu",
            "dGVuc29yYm9hcmQuRXhlY1RpbWU6AjgBIi0KCEV4ZWNUaW1lEiEKBXRpbWVz",
            "GAEgAygLMhIudGVuc29yYm9hcmQuVHVwbGUiqAMKCkV4ZWNNZW1vcnkSFQoN",
            "bWVtb3J5X21pY3JvcxgBIAEoAxIXCg9ob3N0X3RlbXBfYnl0ZXMYAiABKAMS",
            "HQoVaG9zdF9wZXJzaXN0ZW50X2J5dGVzGAMgASgDEh4KFmFjY2VsZXJhdG9y",
            "X3RlbXBfYnl0ZXMYBCABKAMSJAocYWNjZWxlcmF0b3JfcGVyc2lzdGVudF9i",
            "eXRlcxgFIAEoAxIXCg9yZXF1ZXN0ZWRfYnl0ZXMYBiABKAMSEgoKcGVha19i",
            "eXRlcxgHIAEoAxIWCg5yZXNpZHVhbF9ieXRlcxgIIAEoAxIUCgxvdXRwdXRf",
            "Ynl0ZXMYCSABKAMSHgoWYWxsb2NhdG9yX2J5dGVzX2luX3VzZRgKIAEoAxJA",
            "Cg1vdXRwdXRfbWVtb3J5GAsgAygLMikudGVuc29yYm9hcmQuRXhlY01lbW9y",
            "eS5PdXRwdXRNZW1vcnlFbnRyeRpIChFPdXRwdXRNZW1vcnlFbnRyeRILCgNr",
            "ZXkYASABKAUSIgoFdmFsdWUYAiABKAsyEy50ZW5zb3Jib2FyZC5NZW1vcnk6",
            "AjgBIh0KBVR1cGxlEhQKDGludDY0X3ZhbHVlcxgBIAMoAyIkCgZNZW1vcnkS",
            "DQoFYnl0ZXMYASABKAMSCwoDcHRyGAIgASgEQlJaUGdpdGh1Yi5jb20vdGVu",
            "c29yZmxvdy90ZW5zb3JmbG93L3RlbnNvcmZsb3cvZ28vY29yZS9wcm9maWxl",
            "ci90ZnByb2ZfbG9nX2dvX3Byb3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Tensorboard.AttrValueReflection.Descriptor, global::Tensorboard.StepStatsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorboard.CodeDef), global::Tensorboard.CodeDef.Parser, new[]{ "Traces" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Tensorboard.CodeDef.Types.Trace), global::Tensorboard.CodeDef.Types.Trace.Parser, new[]{ "File", "FileId", "Lineno", "Function", "FunctionId", "Line", "LineId", "FuncStartLine" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorboard.OpLogEntry), global::Tensorboard.OpLogEntry.Parser, new[]{ "Name", "FloatOps", "Types_", "CodeDef" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorboard.OpLogProto), global::Tensorboard.OpLogProto.Parser, new[]{ "LogEntries", "IdToString" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorboard.ProfileProto), global::Tensorboard.ProfileProto.Parser, new[]{ "Nodes", "HasTrace", "MissAcceleratorStream", "Steps", "IdToString" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorboard.ProfileNode), global::Tensorboard.ProfileNode.Parser, new[]{ "Name", "Op", "Id", "Inputs", "InputShapes", "Outputs", "OutputShapes", "SrcOutputIndex", "Shape", "OpTypes", "CanonicalDevice", "HostDevice", "FloatOps", "Trace", "Attrs", "Execs" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, null, null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorboard.ExecProfile), global::Tensorboard.ExecProfile.Parser, new[]{ "RunCount", "AllStartMicros", "LatestEndMicros", "AcceleratorExecs", "CpuExecs", "MemoryExecs", "Allocations", "Devices" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorboard.ExecTime), global::Tensorboard.ExecTime.Parser, new[]{ "Times" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorboard.ExecMemory), global::Tensorboard.ExecMemory.Parser, new[]{ "MemoryMicros", "HostTempBytes", "HostPersistentBytes", "AcceleratorTempBytes", "AcceleratorPersistentBytes", "RequestedBytes", "PeakBytes", "ResidualBytes", "OutputBytes", "AllocatorBytesInUse", "OutputMemory" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorboard.Tuple), global::Tensorboard.Tuple.Parser, new[]{ "Int64Values" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorboard.Memory), global::Tensorboard.Memory.Parser, new[]{ "Bytes", "Ptr" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// It specifies the Python callstack that creates an op.
  /// </summary>
  public sealed partial class CodeDef : pb::IMessage<CodeDef> {
    private static readonly pb::MessageParser<CodeDef> _parser = new pb::MessageParser<CodeDef>(() => new CodeDef());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CodeDef> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorboard.TfprofLogReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CodeDef() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CodeDef(CodeDef other) : this() {
      traces_ = other.traces_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CodeDef Clone() {
      return new CodeDef(this);
    }

    /// <summary>Field number for the "traces" field.</summary>
    public const int TracesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tensorboard.CodeDef.Types.Trace> _repeated_traces_codec
        = pb::FieldCodec.ForMessage(10, global::Tensorboard.CodeDef.Types.Trace.Parser);
    private readonly pbc::RepeatedField<global::Tensorboard.CodeDef.Types.Trace> traces_ = new pbc::RepeatedField<global::Tensorboard.CodeDef.Types.Trace>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorboard.CodeDef.Types.Trace> Traces {
      get { return traces_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CodeDef);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CodeDef other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!traces_.Equals(other.traces_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= traces_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      traces_.WriteTo(output, _repeated_traces_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += traces_.CalculateSize(_repeated_traces_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CodeDef other) {
      if (other == null) {
        return;
      }
      traces_.Add(other.traces_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            traces_.AddEntriesFrom(input, _repeated_traces_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CodeDef message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Trace : pb::IMessage<Trace> {
        private static readonly pb::MessageParser<Trace> _parser = new pb::MessageParser<Trace>(() => new Trace());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Trace> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tensorboard.CodeDef.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Trace() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Trace(Trace other) : this() {
          file_ = other.file_;
          fileId_ = other.fileId_;
          lineno_ = other.lineno_;
          function_ = other.function_;
          functionId_ = other.functionId_;
          line_ = other.line_;
          lineId_ = other.lineId_;
          funcStartLine_ = other.funcStartLine_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Trace Clone() {
          return new Trace(this);
        }

        /// <summary>Field number for the "file" field.</summary>
        public const int FileFieldNumber = 1;
        private string file_ = "";
        /// <summary>
        /// deprecated by file_id.
        /// </summary>
        [global::System.ObsoleteAttribute]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string File {
          get { return file_; }
          set {
            file_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "file_id" field.</summary>
        public const int FileIdFieldNumber = 6;
        private long fileId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long FileId {
          get { return fileId_; }
          set {
            fileId_ = value;
          }
        }

        /// <summary>Field number for the "lineno" field.</summary>
        public const int LinenoFieldNumber = 2;
        private int lineno_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Lineno {
          get { return lineno_; }
          set {
            lineno_ = value;
          }
        }

        /// <summary>Field number for the "function" field.</summary>
        public const int FunctionFieldNumber = 3;
        private string function_ = "";
        /// <summary>
        /// deprecated by function_id.
        /// </summary>
        [global::System.ObsoleteAttribute]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Function {
          get { return function_; }
          set {
            function_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "function_id" field.</summary>
        public const int FunctionIdFieldNumber = 7;
        private long functionId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long FunctionId {
          get { return functionId_; }
          set {
            functionId_ = value;
          }
        }

        /// <summary>Field number for the "line" field.</summary>
        public const int LineFieldNumber = 4;
        private string line_ = "";
        /// <summary>
        /// deprecated line_id.
        /// </summary>
        [global::System.ObsoleteAttribute]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Line {
          get { return line_; }
          set {
            line_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "line_id" field.</summary>
        public const int LineIdFieldNumber = 8;
        private long lineId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LineId {
          get { return lineId_; }
          set {
            lineId_ = value;
          }
        }

        /// <summary>Field number for the "func_start_line" field.</summary>
        public const int FuncStartLineFieldNumber = 5;
        private int funcStartLine_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int FuncStartLine {
          get { return funcStartLine_; }
          set {
            funcStartLine_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Trace);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Trace other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (File != other.File) return false;
          if (FileId != other.FileId) return false;
          if (Lineno != other.Lineno) return false;
          if (Function != other.Function) return false;
          if (FunctionId != other.FunctionId) return false;
          if (Line != other.Line) return false;
          if (LineId != other.LineId) return false;
          if (FuncStartLine != other.FuncStartLine) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (File.Length != 0) hash ^= File.GetHashCode();
          if (FileId != 0L) hash ^= FileId.GetHashCode();
          if (Lineno != 0) hash ^= Lineno.GetHashCode();
          if (Function.Length != 0) hash ^= Function.GetHashCode();
          if (FunctionId != 0L) hash ^= FunctionId.GetHashCode();
          if (Line.Length != 0) hash ^= Line.GetHashCode();
          if (LineId != 0L) hash ^= LineId.GetHashCode();
          if (FuncStartLine != 0) hash ^= FuncStartLine.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (File.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(File);
          }
          if (Lineno != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Lineno);
          }
          if (Function.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Function);
          }
          if (Line.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Line);
          }
          if (FuncStartLine != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(FuncStartLine);
          }
          if (FileId != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(FileId);
          }
          if (FunctionId != 0L) {
            output.WriteRawTag(56);
            output.WriteInt64(FunctionId);
          }
          if (LineId != 0L) {
            output.WriteRawTag(64);
            output.WriteInt64(LineId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (File.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(File);
          }
          if (FileId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(FileId);
          }
          if (Lineno != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lineno);
          }
          if (Function.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Function);
          }
          if (FunctionId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(FunctionId);
          }
          if (Line.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Line);
          }
          if (LineId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(LineId);
          }
          if (FuncStartLine != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(FuncStartLine);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Trace other) {
          if (other == null) {
            return;
          }
          if (other.File.Length != 0) {
            File = other.File;
          }
          if (other.FileId != 0L) {
            FileId = other.FileId;
          }
          if (other.Lineno != 0) {
            Lineno = other.Lineno;
          }
          if (other.Function.Length != 0) {
            Function = other.Function;
          }
          if (other.FunctionId != 0L) {
            FunctionId = other.FunctionId;
          }
          if (other.Line.Length != 0) {
            Line = other.Line;
          }
          if (other.LineId != 0L) {
            LineId = other.LineId;
          }
          if (other.FuncStartLine != 0) {
            FuncStartLine = other.FuncStartLine;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                File = input.ReadString();
                break;
              }
              case 16: {
                Lineno = input.ReadInt32();
                break;
              }
              case 26: {
                Function = input.ReadString();
                break;
              }
              case 34: {
                Line = input.ReadString();
                break;
              }
              case 40: {
                FuncStartLine = input.ReadInt32();
                break;
              }
              case 48: {
                FileId = input.ReadInt64();
                break;
              }
              case 56: {
                FunctionId = input.ReadInt64();
                break;
              }
              case 64: {
                LineId = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class OpLogEntry : pb::IMessage<OpLogEntry> {
    private static readonly pb::MessageParser<OpLogEntry> _parser = new pb::MessageParser<OpLogEntry>(() => new OpLogEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpLogEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorboard.TfprofLogReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpLogEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpLogEntry(OpLogEntry other) : this() {
      name_ = other.name_;
      floatOps_ = other.floatOps_;
      types_ = other.types_.Clone();
      codeDef_ = other.codeDef_ != null ? other.codeDef_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpLogEntry Clone() {
      return new OpLogEntry(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// op name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "float_ops" field.</summary>
    public const int FloatOpsFieldNumber = 2;
    private long floatOps_;
    /// <summary>
    /// float_ops is filled by tfprof Python API when called. It requires the
    /// op has RegisterStatistics defined. Currently, Conv2D, MatMul, etc, are
    /// implemented.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FloatOps {
      get { return floatOps_; }
      set {
        floatOps_ = value;
      }
    }

    /// <summary>Field number for the "types" field.</summary>
    public const int Types_FieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_types_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> types_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// User can define extra op type information for an op. This allows the user
    /// to select a group of ops precisely using op_type as a key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Types_ {
      get { return types_; }
    }

    /// <summary>Field number for the "code_def" field.</summary>
    public const int CodeDefFieldNumber = 4;
    private global::Tensorboard.CodeDef codeDef_;
    /// <summary>
    /// Used to support tfprof "code" view.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorboard.CodeDef CodeDef {
      get { return codeDef_; }
      set {
        codeDef_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpLogEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpLogEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (FloatOps != other.FloatOps) return false;
      if(!types_.Equals(other.types_)) return false;
      if (!object.Equals(CodeDef, other.CodeDef)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (FloatOps != 0L) hash ^= FloatOps.GetHashCode();
      hash ^= types_.GetHashCode();
      if (codeDef_ != null) hash ^= CodeDef.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (FloatOps != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(FloatOps);
      }
      types_.WriteTo(output, _repeated_types_codec);
      if (codeDef_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CodeDef);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (FloatOps != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FloatOps);
      }
      size += types_.CalculateSize(_repeated_types_codec);
      if (codeDef_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CodeDef);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpLogEntry other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.FloatOps != 0L) {
        FloatOps = other.FloatOps;
      }
      types_.Add(other.types_);
      if (other.codeDef_ != null) {
        if (codeDef_ == null) {
          CodeDef = new global::Tensorboard.CodeDef();
        }
        CodeDef.MergeFrom(other.CodeDef);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            FloatOps = input.ReadInt64();
            break;
          }
          case 26: {
            types_.AddEntriesFrom(input, _repeated_types_codec);
            break;
          }
          case 34: {
            if (codeDef_ == null) {
              CodeDef = new global::Tensorboard.CodeDef();
            }
            input.ReadMessage(CodeDef);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OpLogProto : pb::IMessage<OpLogProto> {
    private static readonly pb::MessageParser<OpLogProto> _parser = new pb::MessageParser<OpLogProto>(() => new OpLogProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpLogProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorboard.TfprofLogReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpLogProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpLogProto(OpLogProto other) : this() {
      logEntries_ = other.logEntries_.Clone();
      idToString_ = other.idToString_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpLogProto Clone() {
      return new OpLogProto(this);
    }

    /// <summary>Field number for the "log_entries" field.</summary>
    public const int LogEntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tensorboard.OpLogEntry> _repeated_logEntries_codec
        = pb::FieldCodec.ForMessage(10, global::Tensorboard.OpLogEntry.Parser);
    private readonly pbc::RepeatedField<global::Tensorboard.OpLogEntry> logEntries_ = new pbc::RepeatedField<global::Tensorboard.OpLogEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorboard.OpLogEntry> LogEntries {
      get { return logEntries_; }
    }

    /// <summary>Field number for the "id_to_string" field.</summary>
    public const int IdToStringFieldNumber = 2;
    private static readonly pbc::MapField<long, string>.Codec _map_idToString_codec
        = new pbc::MapField<long, string>.Codec(pb::FieldCodec.ForInt64(8, 0L), pb::FieldCodec.ForString(18, ""), 18);
    private readonly pbc::MapField<long, string> idToString_ = new pbc::MapField<long, string>();
    /// <summary>
    /// Maps from id of CodeDef file,function,line to its string
    /// In the future can also map other id of other fields to string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, string> IdToString {
      get { return idToString_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpLogProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpLogProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!logEntries_.Equals(other.logEntries_)) return false;
      if (!IdToString.Equals(other.IdToString)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= logEntries_.GetHashCode();
      hash ^= IdToString.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      logEntries_.WriteTo(output, _repeated_logEntries_codec);
      idToString_.WriteTo(output, _map_idToString_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += logEntries_.CalculateSize(_repeated_logEntries_codec);
      size += idToString_.CalculateSize(_map_idToString_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpLogProto other) {
      if (other == null) {
        return;
      }
      logEntries_.Add(other.logEntries_);
      idToString_.Add(other.idToString_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            logEntries_.AddEntriesFrom(input, _repeated_logEntries_codec);
            break;
          }
          case 18: {
            idToString_.AddEntriesFrom(input, _map_idToString_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A proto representation of the profiler's profile.
  /// It allows serialization, shipping around and deserialization of the profiles.
  ///
  /// Please don't depend on the internals of the profile proto.
  /// </summary>
  public sealed partial class ProfileProto : pb::IMessage<ProfileProto> {
    private static readonly pb::MessageParser<ProfileProto> _parser = new pb::MessageParser<ProfileProto>(() => new ProfileProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfileProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorboard.TfprofLogReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileProto(ProfileProto other) : this() {
      nodes_ = other.nodes_.Clone();
      hasTrace_ = other.hasTrace_;
      missAcceleratorStream_ = other.missAcceleratorStream_;
      steps_ = other.steps_.Clone();
      idToString_ = other.idToString_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileProto Clone() {
      return new ProfileProto(this);
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 1;
    private static readonly pbc::MapField<long, global::Tensorboard.ProfileNode>.Codec _map_nodes_codec
        = new pbc::MapField<long, global::Tensorboard.ProfileNode>.Codec(pb::FieldCodec.ForInt64(8, 0L), pb::FieldCodec.ForMessage(18, global::Tensorboard.ProfileNode.Parser), 10);
    private readonly pbc::MapField<long, global::Tensorboard.ProfileNode> nodes_ = new pbc::MapField<long, global::Tensorboard.ProfileNode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, global::Tensorboard.ProfileNode> Nodes {
      get { return nodes_; }
    }

    /// <summary>Field number for the "has_trace" field.</summary>
    public const int HasTraceFieldNumber = 2;
    private bool hasTrace_;
    /// <summary>
    /// Whether or not has code traces.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTrace {
      get { return hasTrace_; }
      set {
        hasTrace_ = value;
      }
    }

    /// <summary>Field number for the "miss_accelerator_stream" field.</summary>
    public const int MissAcceleratorStreamFieldNumber = 5;
    private bool missAcceleratorStream_;
    /// <summary>
    /// Whether or not the TF device tracer fails to return accelerator
    /// information (which could lead to 0 accelerator execution time).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MissAcceleratorStream {
      get { return missAcceleratorStream_; }
      set {
        missAcceleratorStream_ = value;
      }
    }

    /// <summary>Field number for the "steps" field.</summary>
    public const int StepsFieldNumber = 3;
    private static readonly pb::FieldCodec<long> _repeated_steps_codec
        = pb::FieldCodec.ForInt64(26);
    private readonly pbc::RepeatedField<long> steps_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// Traced steps.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Steps {
      get { return steps_; }
    }

    /// <summary>Field number for the "id_to_string" field.</summary>
    public const int IdToStringFieldNumber = 4;
    private static readonly pbc::MapField<long, string>.Codec _map_idToString_codec
        = new pbc::MapField<long, string>.Codec(pb::FieldCodec.ForInt64(8, 0L), pb::FieldCodec.ForString(18, ""), 34);
    private readonly pbc::MapField<long, string> idToString_ = new pbc::MapField<long, string>();
    /// <summary>
    /// Maps from id of CodeDef file,function,line to its string
    /// In the future can also map other id of other fields to string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, string> IdToString {
      get { return idToString_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfileProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfileProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Nodes.Equals(other.Nodes)) return false;
      if (HasTrace != other.HasTrace) return false;
      if (MissAcceleratorStream != other.MissAcceleratorStream) return false;
      if(!steps_.Equals(other.steps_)) return false;
      if (!IdToString.Equals(other.IdToString)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Nodes.GetHashCode();
      if (HasTrace != false) hash ^= HasTrace.GetHashCode();
      if (MissAcceleratorStream != false) hash ^= MissAcceleratorStream.GetHashCode();
      hash ^= steps_.GetHashCode();
      hash ^= IdToString.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nodes_.WriteTo(output, _map_nodes_codec);
      if (HasTrace != false) {
        output.WriteRawTag(16);
        output.WriteBool(HasTrace);
      }
      steps_.WriteTo(output, _repeated_steps_codec);
      idToString_.WriteTo(output, _map_idToString_codec);
      if (MissAcceleratorStream != false) {
        output.WriteRawTag(40);
        output.WriteBool(MissAcceleratorStream);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodes_.CalculateSize(_map_nodes_codec);
      if (HasTrace != false) {
        size += 1 + 1;
      }
      if (MissAcceleratorStream != false) {
        size += 1 + 1;
      }
      size += steps_.CalculateSize(_repeated_steps_codec);
      size += idToString_.CalculateSize(_map_idToString_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfileProto other) {
      if (other == null) {
        return;
      }
      nodes_.Add(other.nodes_);
      if (other.HasTrace != false) {
        HasTrace = other.HasTrace;
      }
      if (other.MissAcceleratorStream != false) {
        MissAcceleratorStream = other.MissAcceleratorStream;
      }
      steps_.Add(other.steps_);
      idToString_.Add(other.idToString_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            nodes_.AddEntriesFrom(input, _map_nodes_codec);
            break;
          }
          case 16: {
            HasTrace = input.ReadBool();
            break;
          }
          case 26:
          case 24: {
            steps_.AddEntriesFrom(input, _repeated_steps_codec);
            break;
          }
          case 34: {
            idToString_.AddEntriesFrom(input, _map_idToString_codec);
            break;
          }
          case 40: {
            MissAcceleratorStream = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProfileNode : pb::IMessage<ProfileNode> {
    private static readonly pb::MessageParser<ProfileNode> _parser = new pb::MessageParser<ProfileNode>(() => new ProfileNode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfileNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorboard.TfprofLogReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileNode(ProfileNode other) : this() {
      name_ = other.name_;
      op_ = other.op_;
      id_ = other.id_;
      inputs_ = other.inputs_.Clone();
      inputShapes_ = other.inputShapes_.Clone();
      outputs_ = other.outputs_.Clone();
      outputShapes_ = other.outputShapes_.Clone();
      srcOutputIndex_ = other.srcOutputIndex_.Clone();
      shape_ = other.shape_.Clone();
      opTypes_ = other.opTypes_.Clone();
      canonicalDevice_ = other.canonicalDevice_;
      hostDevice_ = other.hostDevice_;
      floatOps_ = other.floatOps_;
      trace_ = other.trace_ != null ? other.trace_.Clone() : null;
      attrs_ = other.attrs_.Clone();
      execs_ = other.execs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileNode Clone() {
      return new ProfileNode(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// graph node name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 9;
    private string op_ = "";
    /// <summary>
    /// graph operation type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Op {
      get { return op_; }
      set {
        op_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 13;
    private long id_;
    /// <summary>
    /// A unique id for the node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "inputs" field.</summary>
    public const int InputsFieldNumber = 2;
    private static readonly pbc::MapField<int, long>.Codec _map_inputs_codec
        = new pbc::MapField<int, long>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt64(16, 0L), 18);
    private readonly pbc::MapField<int, long> inputs_ = new pbc::MapField<int, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, long> Inputs {
      get { return inputs_; }
    }

    /// <summary>Field number for the "input_shapes" field.</summary>
    public const int InputShapesFieldNumber = 16;
    private static readonly pbc::MapField<int, global::Tensorboard.Tuple>.Codec _map_inputShapes_codec
        = new pbc::MapField<int, global::Tensorboard.Tuple>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Tensorboard.Tuple.Parser), 130);
    private readonly pbc::MapField<int, global::Tensorboard.Tuple> inputShapes_ = new pbc::MapField<int, global::Tensorboard.Tuple>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Tensorboard.Tuple> InputShapes {
      get { return inputShapes_; }
    }

    /// <summary>Field number for the "outputs" field.</summary>
    public const int OutputsFieldNumber = 3;
    private static readonly pbc::MapField<int, long>.Codec _map_outputs_codec
        = new pbc::MapField<int, long>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt64(16, 0L), 26);
    private readonly pbc::MapField<int, long> outputs_ = new pbc::MapField<int, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, long> Outputs {
      get { return outputs_; }
    }

    /// <summary>Field number for the "output_shapes" field.</summary>
    public const int OutputShapesFieldNumber = 15;
    private static readonly pbc::MapField<int, global::Tensorboard.Tuple>.Codec _map_outputShapes_codec
        = new pbc::MapField<int, global::Tensorboard.Tuple>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Tensorboard.Tuple.Parser), 122);
    private readonly pbc::MapField<int, global::Tensorboard.Tuple> outputShapes_ = new pbc::MapField<int, global::Tensorboard.Tuple>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Tensorboard.Tuple> OutputShapes {
      get { return outputShapes_; }
    }

    /// <summary>Field number for the "src_output_index" field.</summary>
    public const int SrcOutputIndexFieldNumber = 14;
    private static readonly pbc::MapField<long, int>.Codec _map_srcOutputIndex_codec
        = new pbc::MapField<long, int>.Codec(pb::FieldCodec.ForInt64(8, 0L), pb::FieldCodec.ForInt32(16, 0), 114);
    private readonly pbc::MapField<long, int> srcOutputIndex_ = new pbc::MapField<long, int>();
    /// <summary>
    /// A map from source node id to its output index to current node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, int> SrcOutputIndex {
      get { return srcOutputIndex_; }
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 4;
    private static readonly pb::FieldCodec<long> _repeated_shape_codec
        = pb::FieldCodec.ForInt64(34);
    private readonly pbc::RepeatedField<long> shape_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Shape {
      get { return shape_; }
    }

    /// <summary>Field number for the "op_types" field.</summary>
    public const int OpTypesFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_opTypes_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> opTypes_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> OpTypes {
      get { return opTypes_; }
    }

    /// <summary>Field number for the "canonical_device" field.</summary>
    public const int CanonicalDeviceFieldNumber = 6;
    private string canonicalDevice_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CanonicalDevice {
      get { return canonicalDevice_; }
      set {
        canonicalDevice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host_device" field.</summary>
    public const int HostDeviceFieldNumber = 7;
    private string hostDevice_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HostDevice {
      get { return hostDevice_; }
      set {
        hostDevice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "float_ops" field.</summary>
    public const int FloatOpsFieldNumber = 8;
    private long floatOps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FloatOps {
      get { return floatOps_; }
      set {
        floatOps_ = value;
      }
    }

    /// <summary>Field number for the "trace" field.</summary>
    public const int TraceFieldNumber = 10;
    private global::Tensorboard.CodeDef trace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorboard.CodeDef Trace {
      get { return trace_; }
      set {
        trace_ = value;
      }
    }

    /// <summary>Field number for the "attrs" field.</summary>
    public const int AttrsFieldNumber = 11;
    private static readonly pbc::MapField<string, global::Tensorboard.AttrValue>.Codec _map_attrs_codec
        = new pbc::MapField<string, global::Tensorboard.AttrValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Tensorboard.AttrValue.Parser), 90);
    private readonly pbc::MapField<string, global::Tensorboard.AttrValue> attrs_ = new pbc::MapField<string, global::Tensorboard.AttrValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Tensorboard.AttrValue> Attrs {
      get { return attrs_; }
    }

    /// <summary>Field number for the "execs" field.</summary>
    public const int ExecsFieldNumber = 12;
    private static readonly pbc::MapField<long, global::Tensorboard.ExecProfile>.Codec _map_execs_codec
        = new pbc::MapField<long, global::Tensorboard.ExecProfile>.Codec(pb::FieldCodec.ForInt64(8, 0L), pb::FieldCodec.ForMessage(18, global::Tensorboard.ExecProfile.Parser), 98);
    private readonly pbc::MapField<long, global::Tensorboard.ExecProfile> execs_ = new pbc::MapField<long, global::Tensorboard.ExecProfile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, global::Tensorboard.ExecProfile> Execs {
      get { return execs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfileNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfileNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Op != other.Op) return false;
      if (Id != other.Id) return false;
      if (!Inputs.Equals(other.Inputs)) return false;
      if (!InputShapes.Equals(other.InputShapes)) return false;
      if (!Outputs.Equals(other.Outputs)) return false;
      if (!OutputShapes.Equals(other.OutputShapes)) return false;
      if (!SrcOutputIndex.Equals(other.SrcOutputIndex)) return false;
      if(!shape_.Equals(other.shape_)) return false;
      if(!opTypes_.Equals(other.opTypes_)) return false;
      if (CanonicalDevice != other.CanonicalDevice) return false;
      if (HostDevice != other.HostDevice) return false;
      if (FloatOps != other.FloatOps) return false;
      if (!object.Equals(Trace, other.Trace)) return false;
      if (!Attrs.Equals(other.Attrs)) return false;
      if (!Execs.Equals(other.Execs)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Op.Length != 0) hash ^= Op.GetHashCode();
      if (Id != 0L) hash ^= Id.GetHashCode();
      hash ^= Inputs.GetHashCode();
      hash ^= InputShapes.GetHashCode();
      hash ^= Outputs.GetHashCode();
      hash ^= OutputShapes.GetHashCode();
      hash ^= SrcOutputIndex.GetHashCode();
      hash ^= shape_.GetHashCode();
      hash ^= opTypes_.GetHashCode();
      if (CanonicalDevice.Length != 0) hash ^= CanonicalDevice.GetHashCode();
      if (HostDevice.Length != 0) hash ^= HostDevice.GetHashCode();
      if (FloatOps != 0L) hash ^= FloatOps.GetHashCode();
      if (trace_ != null) hash ^= Trace.GetHashCode();
      hash ^= Attrs.GetHashCode();
      hash ^= Execs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      inputs_.WriteTo(output, _map_inputs_codec);
      outputs_.WriteTo(output, _map_outputs_codec);
      shape_.WriteTo(output, _repeated_shape_codec);
      opTypes_.WriteTo(output, _repeated_opTypes_codec);
      if (CanonicalDevice.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CanonicalDevice);
      }
      if (HostDevice.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(HostDevice);
      }
      if (FloatOps != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(FloatOps);
      }
      if (Op.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Op);
      }
      if (trace_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Trace);
      }
      attrs_.WriteTo(output, _map_attrs_codec);
      execs_.WriteTo(output, _map_execs_codec);
      if (Id != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(Id);
      }
      srcOutputIndex_.WriteTo(output, _map_srcOutputIndex_codec);
      outputShapes_.WriteTo(output, _map_outputShapes_codec);
      inputShapes_.WriteTo(output, _map_inputShapes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Op.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Op);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      size += inputs_.CalculateSize(_map_inputs_codec);
      size += inputShapes_.CalculateSize(_map_inputShapes_codec);
      size += outputs_.CalculateSize(_map_outputs_codec);
      size += outputShapes_.CalculateSize(_map_outputShapes_codec);
      size += srcOutputIndex_.CalculateSize(_map_srcOutputIndex_codec);
      size += shape_.CalculateSize(_repeated_shape_codec);
      size += opTypes_.CalculateSize(_repeated_opTypes_codec);
      if (CanonicalDevice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CanonicalDevice);
      }
      if (HostDevice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostDevice);
      }
      if (FloatOps != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FloatOps);
      }
      if (trace_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Trace);
      }
      size += attrs_.CalculateSize(_map_attrs_codec);
      size += execs_.CalculateSize(_map_execs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfileNode other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Op.Length != 0) {
        Op = other.Op;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      inputs_.Add(other.inputs_);
      inputShapes_.Add(other.inputShapes_);
      outputs_.Add(other.outputs_);
      outputShapes_.Add(other.outputShapes_);
      srcOutputIndex_.Add(other.srcOutputIndex_);
      shape_.Add(other.shape_);
      opTypes_.Add(other.opTypes_);
      if (other.CanonicalDevice.Length != 0) {
        CanonicalDevice = other.CanonicalDevice;
      }
      if (other.HostDevice.Length != 0) {
        HostDevice = other.HostDevice;
      }
      if (other.FloatOps != 0L) {
        FloatOps = other.FloatOps;
      }
      if (other.trace_ != null) {
        if (trace_ == null) {
          Trace = new global::Tensorboard.CodeDef();
        }
        Trace.MergeFrom(other.Trace);
      }
      attrs_.Add(other.attrs_);
      execs_.Add(other.execs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            inputs_.AddEntriesFrom(input, _map_inputs_codec);
            break;
          }
          case 26: {
            outputs_.AddEntriesFrom(input, _map_outputs_codec);
            break;
          }
          case 34:
          case 32: {
            shape_.AddEntriesFrom(input, _repeated_shape_codec);
            break;
          }
          case 42: {
            opTypes_.AddEntriesFrom(input, _repeated_opTypes_codec);
            break;
          }
          case 50: {
            CanonicalDevice = input.ReadString();
            break;
          }
          case 58: {
            HostDevice = input.ReadString();
            break;
          }
          case 64: {
            FloatOps = input.ReadInt64();
            break;
          }
          case 74: {
            Op = input.ReadString();
            break;
          }
          case 82: {
            if (trace_ == null) {
              Trace = new global::Tensorboard.CodeDef();
            }
            input.ReadMessage(Trace);
            break;
          }
          case 90: {
            attrs_.AddEntriesFrom(input, _map_attrs_codec);
            break;
          }
          case 98: {
            execs_.AddEntriesFrom(input, _map_execs_codec);
            break;
          }
          case 104: {
            Id = input.ReadInt64();
            break;
          }
          case 114: {
            srcOutputIndex_.AddEntriesFrom(input, _map_srcOutputIndex_codec);
            break;
          }
          case 122: {
            outputShapes_.AddEntriesFrom(input, _map_outputShapes_codec);
            break;
          }
          case 130: {
            inputShapes_.AddEntriesFrom(input, _map_inputShapes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExecProfile : pb::IMessage<ExecProfile> {
    private static readonly pb::MessageParser<ExecProfile> _parser = new pb::MessageParser<ExecProfile>(() => new ExecProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorboard.TfprofLogReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecProfile(ExecProfile other) : this() {
      runCount_ = other.runCount_;
      allStartMicros_ = other.allStartMicros_;
      latestEndMicros_ = other.latestEndMicros_;
      acceleratorExecs_ = other.acceleratorExecs_.Clone();
      cpuExecs_ = other.cpuExecs_.Clone();
      memoryExecs_ = other.memoryExecs_.Clone();
      allocations_ = other.allocations_.Clone();
      devices_ = other.devices_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecProfile Clone() {
      return new ExecProfile(this);
    }

    /// <summary>Field number for the "run_count" field.</summary>
    public const int RunCountFieldNumber = 1;
    private long runCount_;
    /// <summary>
    /// Can be larger than 1 if run multiple times in loop.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RunCount {
      get { return runCount_; }
      set {
        runCount_ = value;
      }
    }

    /// <summary>Field number for the "all_start_micros" field.</summary>
    public const int AllStartMicrosFieldNumber = 2;
    private long allStartMicros_;
    /// <summary>
    /// The earliest/latest time including scheduling and execution.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllStartMicros {
      get { return allStartMicros_; }
      set {
        allStartMicros_ = value;
      }
    }

    /// <summary>Field number for the "latest_end_micros" field.</summary>
    public const int LatestEndMicrosFieldNumber = 3;
    private long latestEndMicros_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LatestEndMicros {
      get { return latestEndMicros_; }
      set {
        latestEndMicros_ = value;
      }
    }

    /// <summary>Field number for the "accelerator_execs" field.</summary>
    public const int AcceleratorExecsFieldNumber = 4;
    private static readonly pbc::MapField<string, global::Tensorboard.ExecTime>.Codec _map_acceleratorExecs_codec
        = new pbc::MapField<string, global::Tensorboard.ExecTime>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Tensorboard.ExecTime.Parser), 34);
    private readonly pbc::MapField<string, global::Tensorboard.ExecTime> acceleratorExecs_ = new pbc::MapField<string, global::Tensorboard.ExecTime>();
    /// <summary>
    /// device -> vector of {op_start_micros, op_exec_micros} pairs.
    /// accelerator_execs: gpu:id/stream:all -> {op_start_micros, op_exec_micros}
    /// For accelerator, vector size can be larger than 1, multiple kernel fires
    /// or in tf.while_loop.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Tensorboard.ExecTime> AcceleratorExecs {
      get { return acceleratorExecs_; }
    }

    /// <summary>Field number for the "cpu_execs" field.</summary>
    public const int CpuExecsFieldNumber = 5;
    private static readonly pbc::MapField<string, global::Tensorboard.ExecTime>.Codec _map_cpuExecs_codec
        = new pbc::MapField<string, global::Tensorboard.ExecTime>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Tensorboard.ExecTime.Parser), 42);
    private readonly pbc::MapField<string, global::Tensorboard.ExecTime> cpuExecs_ = new pbc::MapField<string, global::Tensorboard.ExecTime>();
    /// <summary>
    /// cpu_execs: cpu/gpu:id -> {op_start_micros, op_exec_micros}
    /// For cpu, vector size can be larger than 1 if in tf.while_loop.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Tensorboard.ExecTime> CpuExecs {
      get { return cpuExecs_; }
    }

    /// <summary>Field number for the "memory_execs" field.</summary>
    public const int MemoryExecsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Tensorboard.ExecMemory> _repeated_memoryExecs_codec
        = pb::FieldCodec.ForMessage(58, global::Tensorboard.ExecMemory.Parser);
    private readonly pbc::RepeatedField<global::Tensorboard.ExecMemory> memoryExecs_ = new pbc::RepeatedField<global::Tensorboard.ExecMemory>();
    /// <summary>
    /// Each entry to memory information of a scheduling of the node.
    /// Normally, there will be multiple entries in while_loop.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorboard.ExecMemory> MemoryExecs {
      get { return memoryExecs_; }
    }

    /// <summary>Field number for the "allocations" field.</summary>
    public const int AllocationsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Tensorboard.AllocationRecord> _repeated_allocations_codec
        = pb::FieldCodec.ForMessage(90, global::Tensorboard.AllocationRecord.Parser);
    private readonly pbc::RepeatedField<global::Tensorboard.AllocationRecord> allocations_ = new pbc::RepeatedField<global::Tensorboard.AllocationRecord>();
    /// <summary>
    /// The allocation and deallocation times and sizes throughout execution.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorboard.AllocationRecord> Allocations {
      get { return allocations_; }
    }

    /// <summary>Field number for the "devices" field.</summary>
    public const int DevicesFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_devices_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> devices_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The devices related to this execution.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Devices {
      get { return devices_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RunCount != other.RunCount) return false;
      if (AllStartMicros != other.AllStartMicros) return false;
      if (LatestEndMicros != other.LatestEndMicros) return false;
      if (!AcceleratorExecs.Equals(other.AcceleratorExecs)) return false;
      if (!CpuExecs.Equals(other.CpuExecs)) return false;
      if(!memoryExecs_.Equals(other.memoryExecs_)) return false;
      if(!allocations_.Equals(other.allocations_)) return false;
      if(!devices_.Equals(other.devices_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RunCount != 0L) hash ^= RunCount.GetHashCode();
      if (AllStartMicros != 0L) hash ^= AllStartMicros.GetHashCode();
      if (LatestEndMicros != 0L) hash ^= LatestEndMicros.GetHashCode();
      hash ^= AcceleratorExecs.GetHashCode();
      hash ^= CpuExecs.GetHashCode();
      hash ^= memoryExecs_.GetHashCode();
      hash ^= allocations_.GetHashCode();
      hash ^= devices_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RunCount != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RunCount);
      }
      if (AllStartMicros != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AllStartMicros);
      }
      if (LatestEndMicros != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(LatestEndMicros);
      }
      acceleratorExecs_.WriteTo(output, _map_acceleratorExecs_codec);
      cpuExecs_.WriteTo(output, _map_cpuExecs_codec);
      devices_.WriteTo(output, _repeated_devices_codec);
      memoryExecs_.WriteTo(output, _repeated_memoryExecs_codec);
      allocations_.WriteTo(output, _repeated_allocations_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RunCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RunCount);
      }
      if (AllStartMicros != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllStartMicros);
      }
      if (LatestEndMicros != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LatestEndMicros);
      }
      size += acceleratorExecs_.CalculateSize(_map_acceleratorExecs_codec);
      size += cpuExecs_.CalculateSize(_map_cpuExecs_codec);
      size += memoryExecs_.CalculateSize(_repeated_memoryExecs_codec);
      size += allocations_.CalculateSize(_repeated_allocations_codec);
      size += devices_.CalculateSize(_repeated_devices_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecProfile other) {
      if (other == null) {
        return;
      }
      if (other.RunCount != 0L) {
        RunCount = other.RunCount;
      }
      if (other.AllStartMicros != 0L) {
        AllStartMicros = other.AllStartMicros;
      }
      if (other.LatestEndMicros != 0L) {
        LatestEndMicros = other.LatestEndMicros;
      }
      acceleratorExecs_.Add(other.acceleratorExecs_);
      cpuExecs_.Add(other.cpuExecs_);
      memoryExecs_.Add(other.memoryExecs_);
      allocations_.Add(other.allocations_);
      devices_.Add(other.devices_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RunCount = input.ReadInt64();
            break;
          }
          case 16: {
            AllStartMicros = input.ReadInt64();
            break;
          }
          case 24: {
            LatestEndMicros = input.ReadInt64();
            break;
          }
          case 34: {
            acceleratorExecs_.AddEntriesFrom(input, _map_acceleratorExecs_codec);
            break;
          }
          case 42: {
            cpuExecs_.AddEntriesFrom(input, _map_cpuExecs_codec);
            break;
          }
          case 50: {
            devices_.AddEntriesFrom(input, _repeated_devices_codec);
            break;
          }
          case 58: {
            memoryExecs_.AddEntriesFrom(input, _repeated_memoryExecs_codec);
            break;
          }
          case 90: {
            allocations_.AddEntriesFrom(input, _repeated_allocations_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExecTime : pb::IMessage<ExecTime> {
    private static readonly pb::MessageParser<ExecTime> _parser = new pb::MessageParser<ExecTime>(() => new ExecTime());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecTime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorboard.TfprofLogReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecTime(ExecTime other) : this() {
      times_ = other.times_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecTime Clone() {
      return new ExecTime(this);
    }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tensorboard.Tuple> _repeated_times_codec
        = pb::FieldCodec.ForMessage(10, global::Tensorboard.Tuple.Parser);
    private readonly pbc::RepeatedField<global::Tensorboard.Tuple> times_ = new pbc::RepeatedField<global::Tensorboard.Tuple>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorboard.Tuple> Times {
      get { return times_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecTime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!times_.Equals(other.times_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= times_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      times_.WriteTo(output, _repeated_times_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += times_.CalculateSize(_repeated_times_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecTime other) {
      if (other == null) {
        return;
      }
      times_.Add(other.times_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            times_.AddEntriesFrom(input, _repeated_times_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExecMemory : pb::IMessage<ExecMemory> {
    private static readonly pb::MessageParser<ExecMemory> _parser = new pb::MessageParser<ExecMemory>(() => new ExecMemory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecMemory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorboard.TfprofLogReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecMemory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecMemory(ExecMemory other) : this() {
      memoryMicros_ = other.memoryMicros_;
      hostTempBytes_ = other.hostTempBytes_;
      hostPersistentBytes_ = other.hostPersistentBytes_;
      acceleratorTempBytes_ = other.acceleratorTempBytes_;
      acceleratorPersistentBytes_ = other.acceleratorPersistentBytes_;
      requestedBytes_ = other.requestedBytes_;
      peakBytes_ = other.peakBytes_;
      residualBytes_ = other.residualBytes_;
      outputBytes_ = other.outputBytes_;
      allocatorBytesInUse_ = other.allocatorBytesInUse_;
      outputMemory_ = other.outputMemory_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecMemory Clone() {
      return new ExecMemory(this);
    }

    /// <summary>Field number for the "memory_micros" field.</summary>
    public const int MemoryMicrosFieldNumber = 1;
    private long memoryMicros_;
    /// <summary>
    /// This is the timestamp when the memory information was tracked.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MemoryMicros {
      get { return memoryMicros_; }
      set {
        memoryMicros_ = value;
      }
    }

    /// <summary>Field number for the "host_temp_bytes" field.</summary>
    public const int HostTempBytesFieldNumber = 2;
    private long hostTempBytes_;
    /// <summary>
    /// NOTE: Please don't depend on the following 4 fields yet. Due to
    /// TensorFlow internal tracing issues, the numbers can be quite wrong.
    /// TODO(xpan): Fix the TensorFlow internal tracing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HostTempBytes {
      get { return hostTempBytes_; }
      set {
        hostTempBytes_ = value;
      }
    }

    /// <summary>Field number for the "host_persistent_bytes" field.</summary>
    public const int HostPersistentBytesFieldNumber = 3;
    private long hostPersistentBytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HostPersistentBytes {
      get { return hostPersistentBytes_; }
      set {
        hostPersistentBytes_ = value;
      }
    }

    /// <summary>Field number for the "accelerator_temp_bytes" field.</summary>
    public const int AcceleratorTempBytesFieldNumber = 4;
    private long acceleratorTempBytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AcceleratorTempBytes {
      get { return acceleratorTempBytes_; }
      set {
        acceleratorTempBytes_ = value;
      }
    }

    /// <summary>Field number for the "accelerator_persistent_bytes" field.</summary>
    public const int AcceleratorPersistentBytesFieldNumber = 5;
    private long acceleratorPersistentBytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AcceleratorPersistentBytes {
      get { return acceleratorPersistentBytes_; }
      set {
        acceleratorPersistentBytes_ = value;
      }
    }

    /// <summary>Field number for the "requested_bytes" field.</summary>
    public const int RequestedBytesFieldNumber = 6;
    private long requestedBytes_;
    /// <summary>
    /// Total bytes requested by the op.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RequestedBytes {
      get { return requestedBytes_; }
      set {
        requestedBytes_ = value;
      }
    }

    /// <summary>Field number for the "peak_bytes" field.</summary>
    public const int PeakBytesFieldNumber = 7;
    private long peakBytes_;
    /// <summary>
    /// Total bytes requested by the op and released before op end.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PeakBytes {
      get { return peakBytes_; }
      set {
        peakBytes_ = value;
      }
    }

    /// <summary>Field number for the "residual_bytes" field.</summary>
    public const int ResidualBytesFieldNumber = 8;
    private long residualBytes_;
    /// <summary>
    /// Total bytes requested by the op and not released after op end.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ResidualBytes {
      get { return residualBytes_; }
      set {
        residualBytes_ = value;
      }
    }

    /// <summary>Field number for the "output_bytes" field.</summary>
    public const int OutputBytesFieldNumber = 9;
    private long outputBytes_;
    /// <summary>
    /// Total bytes output by the op (not necessarily requested by the op).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OutputBytes {
      get { return outputBytes_; }
      set {
        outputBytes_ = value;
      }
    }

    /// <summary>Field number for the "allocator_bytes_in_use" field.</summary>
    public const int AllocatorBytesInUseFieldNumber = 10;
    private long allocatorBytesInUse_;
    /// <summary>
    /// The total number of bytes currently allocated by the allocator if >0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllocatorBytesInUse {
      get { return allocatorBytesInUse_; }
      set {
        allocatorBytesInUse_ = value;
      }
    }

    /// <summary>Field number for the "output_memory" field.</summary>
    public const int OutputMemoryFieldNumber = 11;
    private static readonly pbc::MapField<int, global::Tensorboard.Memory>.Codec _map_outputMemory_codec
        = new pbc::MapField<int, global::Tensorboard.Memory>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Tensorboard.Memory.Parser), 90);
    private readonly pbc::MapField<int, global::Tensorboard.Memory> outputMemory_ = new pbc::MapField<int, global::Tensorboard.Memory>();
    /// <summary>
    /// The memory of each output of the operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Tensorboard.Memory> OutputMemory {
      get { return outputMemory_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecMemory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecMemory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MemoryMicros != other.MemoryMicros) return false;
      if (HostTempBytes != other.HostTempBytes) return false;
      if (HostPersistentBytes != other.HostPersistentBytes) return false;
      if (AcceleratorTempBytes != other.AcceleratorTempBytes) return false;
      if (AcceleratorPersistentBytes != other.AcceleratorPersistentBytes) return false;
      if (RequestedBytes != other.RequestedBytes) return false;
      if (PeakBytes != other.PeakBytes) return false;
      if (ResidualBytes != other.ResidualBytes) return false;
      if (OutputBytes != other.OutputBytes) return false;
      if (AllocatorBytesInUse != other.AllocatorBytesInUse) return false;
      if (!OutputMemory.Equals(other.OutputMemory)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MemoryMicros != 0L) hash ^= MemoryMicros.GetHashCode();
      if (HostTempBytes != 0L) hash ^= HostTempBytes.GetHashCode();
      if (HostPersistentBytes != 0L) hash ^= HostPersistentBytes.GetHashCode();
      if (AcceleratorTempBytes != 0L) hash ^= AcceleratorTempBytes.GetHashCode();
      if (AcceleratorPersistentBytes != 0L) hash ^= AcceleratorPersistentBytes.GetHashCode();
      if (RequestedBytes != 0L) hash ^= RequestedBytes.GetHashCode();
      if (PeakBytes != 0L) hash ^= PeakBytes.GetHashCode();
      if (ResidualBytes != 0L) hash ^= ResidualBytes.GetHashCode();
      if (OutputBytes != 0L) hash ^= OutputBytes.GetHashCode();
      if (AllocatorBytesInUse != 0L) hash ^= AllocatorBytesInUse.GetHashCode();
      hash ^= OutputMemory.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MemoryMicros != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MemoryMicros);
      }
      if (HostTempBytes != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(HostTempBytes);
      }
      if (HostPersistentBytes != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(HostPersistentBytes);
      }
      if (AcceleratorTempBytes != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(AcceleratorTempBytes);
      }
      if (AcceleratorPersistentBytes != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(AcceleratorPersistentBytes);
      }
      if (RequestedBytes != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(RequestedBytes);
      }
      if (PeakBytes != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(PeakBytes);
      }
      if (ResidualBytes != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(ResidualBytes);
      }
      if (OutputBytes != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(OutputBytes);
      }
      if (AllocatorBytesInUse != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(AllocatorBytesInUse);
      }
      outputMemory_.WriteTo(output, _map_outputMemory_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MemoryMicros != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MemoryMicros);
      }
      if (HostTempBytes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HostTempBytes);
      }
      if (HostPersistentBytes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HostPersistentBytes);
      }
      if (AcceleratorTempBytes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AcceleratorTempBytes);
      }
      if (AcceleratorPersistentBytes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AcceleratorPersistentBytes);
      }
      if (RequestedBytes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RequestedBytes);
      }
      if (PeakBytes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PeakBytes);
      }
      if (ResidualBytes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ResidualBytes);
      }
      if (OutputBytes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OutputBytes);
      }
      if (AllocatorBytesInUse != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllocatorBytesInUse);
      }
      size += outputMemory_.CalculateSize(_map_outputMemory_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecMemory other) {
      if (other == null) {
        return;
      }
      if (other.MemoryMicros != 0L) {
        MemoryMicros = other.MemoryMicros;
      }
      if (other.HostTempBytes != 0L) {
        HostTempBytes = other.HostTempBytes;
      }
      if (other.HostPersistentBytes != 0L) {
        HostPersistentBytes = other.HostPersistentBytes;
      }
      if (other.AcceleratorTempBytes != 0L) {
        AcceleratorTempBytes = other.AcceleratorTempBytes;
      }
      if (other.AcceleratorPersistentBytes != 0L) {
        AcceleratorPersistentBytes = other.AcceleratorPersistentBytes;
      }
      if (other.RequestedBytes != 0L) {
        RequestedBytes = other.RequestedBytes;
      }
      if (other.PeakBytes != 0L) {
        PeakBytes = other.PeakBytes;
      }
      if (other.ResidualBytes != 0L) {
        ResidualBytes = other.ResidualBytes;
      }
      if (other.OutputBytes != 0L) {
        OutputBytes = other.OutputBytes;
      }
      if (other.AllocatorBytesInUse != 0L) {
        AllocatorBytesInUse = other.AllocatorBytesInUse;
      }
      outputMemory_.Add(other.outputMemory_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MemoryMicros = input.ReadInt64();
            break;
          }
          case 16: {
            HostTempBytes = input.ReadInt64();
            break;
          }
          case 24: {
            HostPersistentBytes = input.ReadInt64();
            break;
          }
          case 32: {
            AcceleratorTempBytes = input.ReadInt64();
            break;
          }
          case 40: {
            AcceleratorPersistentBytes = input.ReadInt64();
            break;
          }
          case 48: {
            RequestedBytes = input.ReadInt64();
            break;
          }
          case 56: {
            PeakBytes = input.ReadInt64();
            break;
          }
          case 64: {
            ResidualBytes = input.ReadInt64();
            break;
          }
          case 72: {
            OutputBytes = input.ReadInt64();
            break;
          }
          case 80: {
            AllocatorBytesInUse = input.ReadInt64();
            break;
          }
          case 90: {
            outputMemory_.AddEntriesFrom(input, _map_outputMemory_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Tuple : pb::IMessage<Tuple> {
    private static readonly pb::MessageParser<Tuple> _parser = new pb::MessageParser<Tuple>(() => new Tuple());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tuple> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorboard.TfprofLogReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tuple() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tuple(Tuple other) : this() {
      int64Values_ = other.int64Values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tuple Clone() {
      return new Tuple(this);
    }

    /// <summary>Field number for the "int64_values" field.</summary>
    public const int Int64ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_int64Values_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> int64Values_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Int64Values {
      get { return int64Values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tuple);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tuple other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!int64Values_.Equals(other.int64Values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= int64Values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      int64Values_.WriteTo(output, _repeated_int64Values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += int64Values_.CalculateSize(_repeated_int64Values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tuple other) {
      if (other == null) {
        return;
      }
      int64Values_.Add(other.int64Values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            int64Values_.AddEntriesFrom(input, _repeated_int64Values_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Memory : pb::IMessage<Memory> {
    private static readonly pb::MessageParser<Memory> _parser = new pb::MessageParser<Memory>(() => new Memory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Memory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorboard.TfprofLogReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Memory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Memory(Memory other) : this() {
      bytes_ = other.bytes_;
      ptr_ = other.ptr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Memory Clone() {
      return new Memory(this);
    }

    /// <summary>Field number for the "bytes" field.</summary>
    public const int BytesFieldNumber = 1;
    private long bytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Bytes {
      get { return bytes_; }
      set {
        bytes_ = value;
      }
    }

    /// <summary>Field number for the "ptr" field.</summary>
    public const int PtrFieldNumber = 2;
    private ulong ptr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Ptr {
      get { return ptr_; }
      set {
        ptr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Memory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Memory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Bytes != other.Bytes) return false;
      if (Ptr != other.Ptr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Bytes != 0L) hash ^= Bytes.GetHashCode();
      if (Ptr != 0UL) hash ^= Ptr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Bytes != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Bytes);
      }
      if (Ptr != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Ptr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Bytes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Bytes);
      }
      if (Ptr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Ptr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Memory other) {
      if (other == null) {
        return;
      }
      if (other.Bytes != 0L) {
        Bytes = other.Bytes;
      }
      if (other.Ptr != 0UL) {
        Ptr = other.Ptr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Bytes = input.ReadInt64();
            break;
          }
          case 16: {
            Ptr = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
