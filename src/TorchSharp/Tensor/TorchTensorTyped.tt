<#@ Template Language="C#" #>
<#@ Assembly Name="System.Core" #>
<#@ Output Extension=".generated.cs" #>
<#@ Include File="Types.ttinclude" #>
using System;
using System.Runtime.InteropServices;
using System.Collections.Concurrent;

// Copyright (c) Microsoft Corporation and contributors.  All Rights Reserved.  See License.txt in the project root for license information.
namespace TorchSharp.Tensor {

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void GCHandleDeleter(IntPtr memory);


<#
foreach (var type in TorchTypeDef.Types) {
#>
    /// <summary>
    ///   Tensor of type <#=type.Name#>.
    ///   This tensor maps to a Torch variable (see torch/csrc/autograd/variable.h).
    ///   Please do no mix Aten Tensors and Torch Tensors.
    /// </summary>
<#
if (!type.IsComplex) {
#>
    public class <#=type.Name#>Tensor
<#
} else {
#>
    public partial class <#=type.Name#>Tensor
<# } #>
    {
        static private ConcurrentDictionary<GCHandleDeleter, GCHandleDeleter> deleters;
        static <#=type.Name#>Tensor()
        {
            deleters = new ConcurrentDictionary<GCHandleDeleter, GCHandleDeleter>();
        }

<#
if (!type.IsComplex) {
#>
        [DllImport("LibTorchSharp")]
        extern static IntPtr THSTensor_arange(IntPtr start, IntPtr stop, IntPtr step, sbyte scalarType, int deviceType, int deviceIndex, bool requireGrad);

        /// <summary>
        /// Creates 1-D tensor of size [(stop - start) / step] with values from interval [start, stop) and
		/// common difference step, starting from start
        /// </summary>
        static public TorchTensor arange(TorchScalar start, TorchScalar stop, TorchScalar step, Device device = null, bool requiresGrad = false)
        {
            device = Torch.InitializeDevice(device);

            var handle = THSTensor_arange (start.Handle, stop.Handle, step.Handle, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
            if (handle == IntPtr.Zero) {
                GC.Collect();
                GC.WaitForPendingFinalizers();
                handle = THSTensor_arange (start.Handle, stop.Handle, step.Handle, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
            }
            if (handle == IntPtr.Zero) { Torch.CheckForErrors(); }
            return new TorchTensor (handle);
        }
<# } #>

        /// <summary>
        /// Creates 1-D tensor of size [(stop - start) / step] with values from interval [start, stop) and
		/// common difference step, starting from start
        /// </summary>
        static public TorchTensor arange(TorchScalar start, TorchScalar stop, Device device = null, bool requiresGrad = false)
        {
            return arange(start, stop, 1, device, requiresGrad);
        }

        /// <summary>
        /// Creates 1-D tensor of size [(stop - 0)] with values from interval [0, stop), starting from 0
        /// </summary>
        static public TorchTensor arange(TorchScalar stop, Device device = null, bool requiresGrad = false)
        {
            return arange(0, stop, 1, device, requiresGrad);
        }
		
        [DllImport("LibTorchSharp")]
        extern static IntPtr THSTensor_randperm(long n, sbyte scalarType, int deviceType, int deviceIndex, bool requireGrad);

        /// <summary>
        /// Creates 1-D tensor of size [n] with a random permutation of [0, n).
        /// </summary>
        static public TorchTensor randperm(long n, Device device = null, bool requiresGrad = false)
        {
            device = Torch.InitializeDevice(device);

            var handle = THSTensor_randperm (n, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
            if (handle == IntPtr.Zero) {
                GC.Collect();
                GC.WaitForPendingFinalizers();
                handle = THSTensor_randperm (n, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
            }
            if (handle == IntPtr.Zero) { Torch.CheckForErrors(); }
            return new TorchTensor (handle);
        }
		
		[DllImport("LibTorchSharp")]
        extern static IntPtr THSTensor_zeros(<#=type.Ptr#> psizes, int length, sbyte scalarType, int deviceType, int deviceIndex, bool requireGrad);

        /// <summary>
        ///  Create a new tensor filled with zeros
        /// </summary>
        static public TorchTensor zeros(long[] size, Device device = null, bool requiresGrad = false)
        {
            device = Torch.InitializeDevice(device);

            unsafe
            {
                fixed (long* psizes = size)
                {
                    var handle = THSTensor_zeros ((<#=type.Ptr#>)psizes, size.Length, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
                    if (handle == IntPtr.Zero) {
                        GC.Collect();
                        GC.WaitForPendingFinalizers();
                        handle = THSTensor_zeros ((<#=type.Ptr#>)psizes, size.Length, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
                    }
                    if (handle == IntPtr.Zero) { Torch.CheckForErrors(); }
                    return new TorchTensor (handle);
                }
            }
        }

        /// <summary>
        ///  Create a new 1-D tensor filled with zeros
        /// </summary>
        static public TorchTensor zeros(long size, Device device = null, bool requiresGrad = false)
        {
            return zeros(new long[] { size }, device, requiresGrad);
        }

        /// <summary>
        ///  Create a new 2-D tensor filled with zeros
        /// </summary>
        static public TorchTensor zeros(long rows, long columns, Device device = null, bool requiresGrad = false)
        {
            return zeros(new long[] { rows, columns }, device, requiresGrad);
        }

        /// <summary>
        ///  Create a new 3-D tensor filled with zeros
        /// </summary>
        static public TorchTensor zeros(long dim0, long dim1, long dim2, Device device = null, bool requiresGrad = false)
        {
            return zeros(new long[] { dim0, dim1, dim2 }, device, requiresGrad);
        }

        /// <summary>
        ///  Create a new 4-D tensor filled with zeros
        /// </summary>
        static public TorchTensor zeros(long dim0, long dim1, long dim2, long dim3, Device device = null, bool requiresGrad = false)
        {
            return zeros(new long[] { dim0, dim1, dim2, dim3 }, device, requiresGrad);
        }

        [DllImport("LibTorchSharp")]
        extern static IntPtr THSTensor_ones(<#=type.Ptr#> psizes, int length, sbyte scalarType, int deviceType, int deviceIndex, bool requiresGrad);

        /// <summary>
        ///  Create a new tensor filled with ones
        /// </summary>
        static public TorchTensor ones(long[] size, Device device = null, bool requiresGrad = false)
        {
            device = Torch.InitializeDevice(device);

            unsafe
            {
                fixed (long* psizes = size)
                {
                    var handle = THSTensor_ones ((<#=type.Ptr#>)psizes, size.Length, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
                    if (handle == IntPtr.Zero) {
                        GC.Collect();
                        GC.WaitForPendingFinalizers();
                        handle = THSTensor_ones ((<#=type.Ptr#>)psizes, size.Length, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
                    }
                    if (handle == IntPtr.Zero) { Torch.CheckForErrors(); }
                    return new TorchTensor (handle);
                }
            }
        }

        /// <summary>
        ///  Create a new 1-D tensor filled with ones
        /// </summary>
        static public TorchTensor ones(long size, Device device = null, bool requiresGrad = false)
        {
            return ones(new long[] { size }, device, requiresGrad);
        }

        /// <summary>
        ///  Create a new 2-D tensor filled with ones
        /// </summary>
        static public TorchTensor ones(long rows, long columns, Device device = null, bool requiresGrad = false)
        {
            return ones(new long[] { rows, columns }, device, requiresGrad);
        }

        /// <summary>
        ///  Create a new 3-D tensor filled with ones
        /// </summary>
        static public TorchTensor ones(long dim0, long dim1, long dim2, Device device = null, bool requiresGrad = false)
        {
            return ones(new long[] { dim0, dim1, dim2 }, device, requiresGrad);
        }

        /// <summary>
        ///  Create a new 4-D tensor filled with ones
        /// </summary>
        static public TorchTensor ones(long dim0, long dim1, long dim2, long dim3, Device device = null, bool requiresGrad = false)
        {
            return ones(new long[] { dim0, dim1, dim2, dim3 }, device, requiresGrad);
        }

        [DllImport("LibTorchSharp")]
        extern static IntPtr THSTensor_empty(<#=type.Ptr#> psizes, int length, sbyte scalarType, int deviceType, int deviceIndex, bool requiresGrad);

        /// <summary>
        ///  Create a new tensor filled with uninitialized data
        /// </summary>
        static public TorchTensor empty(long[] size, Device device = null, bool requiresGrad = false)
        {
            device = Torch.InitializeDevice(device);

            unsafe
            {
                fixed (long* psizes = size)
                {
                    var handle = THSTensor_empty ((<#=type.Ptr#>)psizes, size.Length, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
                    if (handle == IntPtr.Zero) {
                        GC.Collect();
                        GC.WaitForPendingFinalizers();
                        handle = THSTensor_empty ((<#=type.Ptr#>)psizes, size.Length, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
                    }
                    if (handle == IntPtr.Zero) { Torch.CheckForErrors(); }
                    return new TorchTensor (handle);
                }
            }
        }

        /// <summary>
        ///  Create a new 1-D tensor filled with uninitialized data
        /// </summary>
        static public TorchTensor empty(long size, Device device = null, bool requiresGrad = false)
        {
            return empty(new long[] { size }, device, requiresGrad);
        }

        /// <summary>
        ///  Create a new 2-D tensor filled with uninitialized data
        /// </summary>
        static public TorchTensor empty(long rows, long columns, Device device = null, bool requiresGrad = false)
        {
            return empty(new long[] { rows, columns }, device, requiresGrad);
        }

        /// <summary>
        ///  Create a new 3-D tensor filled with uninitialized data
        /// </summary>
        static public TorchTensor empty(long dim0, long dim1, long dim2, Device device = null, bool requiresGrad = false)
        {
            return empty(new long[] { dim0, dim1, dim2 }, device, requiresGrad);
        }

        /// <summary>
        ///  Create a new 4-D tensor filled with uninitialized data
        /// </summary>
        static public TorchTensor empty(long dim0, long dim1, long dim2, long dim3, Device device = null, bool requiresGrad = false)
        {
            return empty(new long[] { dim0, dim1, dim2, dim3 }, device, requiresGrad);
        }

        [DllImport("LibTorchSharp")]
        extern static IntPtr THSTensor_empty_strided(<#=type.Ptr#> psizes, int sz_length, <#=type.Ptr#> pstrides, int str_length, sbyte scalarType, int deviceType, int deviceIndex, bool requiresGrad);

        /// <summary>
        ///  Returns a tensor filled with uninitialized data. The shape and strides of the tensor is defined by the variable argument size and stride respectively.
        /// </summary>
        static public TorchTensor empty_strided(long[] size, long[] strides, Device device = null, bool requiresGrad = false)
        {
            device = Torch.InitializeDevice(device);

            unsafe
            {
                fixed (long* psizes = size, pstrides = strides)
                {
                    var handle = THSTensor_empty_strided ((<#=type.Ptr#>)psizes, size.Length, (<#=type.Ptr#>)pstrides, strides.Length, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
                    if (handle == IntPtr.Zero) {
                        GC.Collect();
                        GC.WaitForPendingFinalizers();
                        handle = THSTensor_empty_strided ((<#=type.Ptr#>)psizes, size.Length, (<#=type.Ptr#>)pstrides, strides.Length, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
                    }
                    if (handle == IntPtr.Zero) { Torch.CheckForErrors(); }
                    return new TorchTensor (handle);
                }
            }
        }

        [DllImport("LibTorchSharp")]
        extern static IntPtr THSTensor_full(<#=type.Ptr#> psizes, int length, <#=type.Ptr#> value, sbyte scalarType, int deviceType, int deviceIndex, bool requiresGrad);

        /// <summary>
        ///  Create a new tensor filled with a given value
        /// </summary>
        static public TorchTensor full(long[] size, TorchScalar value, Device device = null, bool requiresGrad = false)
        {
            device = Torch.InitializeDevice(device);

            unsafe
            {
                fixed (long* psizes = size)
                {
                    var handle = THSTensor_full ((<#=type.Ptr#>)psizes, size.Length, value.Handle, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
                    if (handle == IntPtr.Zero) {
                        GC.Collect();
                        GC.WaitForPendingFinalizers();
                        handle = THSTensor_full ((<#=type.Ptr#>)psizes, size.Length, value.Handle, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
                    }
                    if (handle == IntPtr.Zero) { Torch.CheckForErrors(); }
                    return new TorchTensor (handle);
                }
            }
        }

        /// <summary>
        ///  Create a new 1-D tensor filled with given value
        /// </summary>
        static public TorchTensor full(long size, TorchScalar value, Device device = null, bool requiresGrad = false)
        {
            return full(new long[] { size }, value, device, requiresGrad);
        }

        /// <summary>
        ///  Create a new 2-D tensor filled with given value
        /// </summary>
        static public TorchTensor full(long rows, long columns, TorchScalar value, Device device = null, bool requiresGrad = false)
        {
            return full(new long[] { rows, columns }, value, device, requiresGrad);
        }

        /// <summary>
        ///  Create a new 3-D tensor filled with given value
        /// </summary>
        static public TorchTensor full(long dim0, long dim1, long dim2, TorchScalar value, Device device = null, bool requiresGrad = false)
        {
            return full(new long[] { dim0, dim1, dim2 }, value, device, requiresGrad);
        }

        /// <summary>
        ///  Create a new 4-D tensor filled with given value
        /// </summary>
        static public TorchTensor full(long dim0, long dim1, long dim2, long dim3, TorchScalar value, Device device = null, bool requiresGrad = false)
        {
            return full(new long[] { dim0, dim1, dim2, dim3 }, value, device, requiresGrad);
        }

        [DllImport("LibTorchSharp")]
        extern static IntPtr THSTensor_eye(long rows, long columns, sbyte scalarType, int deviceType, int deviceIndex, bool requiresGrad);

        /// <summary>
        ///  Create a 2-D tensor with ones on the diagonal and zeros elsewhere.
        /// </summary>
        static public TorchTensor eye(long rows, long columns = -1L, Device device = null, bool requiresGrad = false)
        {
            device = Torch.InitializeDevice(device);
            columns = (columns == -1) ? rows : columns;

            var handle = THSTensor_eye (rows, columns, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
            if (handle == IntPtr.Zero) {
                GC.Collect();
                GC.WaitForPendingFinalizers();
                handle = THSTensor_eye (rows, columns, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
            }
            if (handle == IntPtr.Zero) { Torch.CheckForErrors(); }
            return new TorchTensor (handle);
        }

<#
if (!type.IsComplex) {
#>
        [DllImport("LibTorchSharp")]
        extern static IntPtr THSTensor_randint(long max, <#=type.Ptr#> psizes, int length, sbyte scalarType, int deviceType, int deviceIndex, bool requiresGrad);

        /// <summary>
        ///  Create a new tensor filled with random integer values taken from a uniform distribution in [0, max).
        /// </summary>
        static public TorchTensor randint(long max, long[] size, Device device = null, bool requiresGrad = false)
        {
            device = Torch.InitializeDevice(device);

            unsafe
            {
                fixed (long* psizes = size)
                {
                    var handle = THSTensor_randint (max, (<#=type.Ptr#>)psizes, size.Length, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
                    if (handle == IntPtr.Zero) {
                        GC.Collect();
                        GC.WaitForPendingFinalizers();
                        handle = THSTensor_randint (max, (<#=type.Ptr#>)psizes, size.Length, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
                    }
                    if (handle == IntPtr.Zero) { Torch.CheckForErrors(); }
                    return new TorchTensor (handle);
                }
            }
        }

<# } #>

<#
if (type.IsFloatingPoint || type.IsComplex) {
#>
        [DllImport("LibTorchSharp")]
        extern static IntPtr THSTensor_rand(<#=type.Ptr#> psizes, int length, sbyte scalarType, int deviceType, int deviceIndex, bool requiresGrad);

        /// <summary>
        ///  Create a new tensor filled with random values taken from a uniform distribution in [0, 1).
        /// </summary>
        static public TorchTensor rand(long[] size, Device device = null, bool requiresGrad = false)
        {
            device = Torch.InitializeDevice(device);

            unsafe
            {
                fixed (long* psizes = size)
                {
                    var handle = THSTensor_rand ((<#=type.Ptr#>)psizes, size.Length, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
                    if (handle == IntPtr.Zero) {
                        GC.Collect();
                        GC.WaitForPendingFinalizers();
                        handle = THSTensor_rand ((<#=type.Ptr#>)psizes, size.Length, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
                    }
                    if (handle == IntPtr.Zero) { Torch.CheckForErrors(); }
                    return new TorchTensor (handle);
                }
            }
        }

        /// <summary>
        ///  Create a new 1-D tensor filled with random values taken from a uniform distribution in [0, 1).
        /// </summary>
        static public TorchTensor rand(long size, Device device = null, bool requiresGrad = false)
        {
            return rand(new long[] { size }, device, requiresGrad);
        }

        /// <summary>
        ///  Create a new 2-D tensor filled with random values taken from a uniform distribution in [0, 1).
        /// </summary>
        static public TorchTensor rand(long rows, long columns, Device device = null, bool requiresGrad = false)
        {
            return rand(new long[] { rows, columns }, device, requiresGrad);
        }

        /// <summary>
        ///  Create a new 3-D tensor filled with random values taken from a uniform distribution in [0, 1).
        /// </summary>
        static public TorchTensor rand(long dim0, long dim1, long dim2, Device device = null, bool requiresGrad = false)
        {
            return rand(new long[] { dim0, dim1, dim2 }, device, requiresGrad);
        }

        /// <summary>
        ///  Create a new 4-D tensor filled with random values taken from a uniform distribution in [0, 1).
        /// </summary>
        static public TorchTensor rand(long dim0, long dim1, long dim2, long dim3, Device device = null, bool requiresGrad = false)
        {
            return rand(new long[] { dim0, dim1, dim2, dim3 }, device, requiresGrad);
        }

        [DllImport("LibTorchSharp")]
        extern static IntPtr THSTensor_randn(<#=type.Ptr#> psizes, int length, sbyte scalarType, int deviceType, int deviceIndex, bool requiresGrad);

        /// <summary>
        ///  Create a new tensor filled with random values taken from a normal distribution with mean 0 and variance 1.
        /// </summary>
        static public TorchTensor randn(long[] size, Device device = null, bool requiresGrad = false)
        {
            device = Torch.InitializeDevice(device);

            unsafe
            {
                fixed (long* psizes = size)
                {
                    var handle = THSTensor_randn ((<#=type.Ptr#>)psizes, size.Length, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
                    if (handle == IntPtr.Zero) {
                        GC.Collect();
                        GC.WaitForPendingFinalizers();
                        handle = THSTensor_randn ((<#=type.Ptr#>)psizes, size.Length, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
                    }
                    if (handle == IntPtr.Zero) { Torch.CheckForErrors(); }
                    return new TorchTensor (handle);
                }
            }
        }

        /// <summary>
        ///  Create a new 1-D tensor filled with random values taken from a normal distribution with mean 0 and variance 1.
        /// </summary>
        static public TorchTensor randn(long size, Device device = null, bool requiresGrad = false)
        {
            return rand(new long[] { size }, device, requiresGrad);
        }

        /// <summary>
        ///  Create a new 2-D tensor filled with random values taken from a normal distribution with mean 0 and variance 1.
        /// </summary>
        static public TorchTensor randn(long rows, long columns, Device device = null, bool requiresGrad = false)
        {
            return rand(new long[] { rows, columns }, device, requiresGrad);
        }

        /// <summary>
        ///  Create a new 3-D tensor filled with random values taken from a normal distribution with mean 0 and variance 1.
        /// </summary>
        static public TorchTensor randn(long dim0, long dim1, long dim2, Device device = null, bool requiresGrad = false)
        {
            return rand(new long[] { dim0, dim1, dim2 }, device, requiresGrad);
        }

        /// <summary>
        ///  Create a new 4-D tensor filled with random values taken from a normal distribution with mean 0 and variance 1.
        /// </summary>
        static public TorchTensor randn(long dim0, long dim1, long dim2, long dim3, Device device = null, bool requiresGrad = false)
        {
            return rand(new long[] { dim0, dim1, dim2, dim3 }, device, requiresGrad);
        }
<# } #>

<#
if (type.IsFloatingPoint) {
#>
        [DllImport("LibTorchSharp")]
        extern static IntPtr THSTensor_fftfreq(long n, double d, sbyte scalarType, int deviceType, int deviceIndex, bool requiresGrad);

        /// <summary>
        /// Computes the discrete Fourier Transform sample frequencies for a signal of size n.
        /// </summary>
        static public TorchTensor fftfreq(long n, double d = 1.0, Device device = null, bool requiresGrad = false)
        {
            device = Torch.InitializeDevice(device);

            var handle = THSTensor_fftfreq (n, d, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
            if (handle == IntPtr.Zero) {
                GC.Collect();
                GC.WaitForPendingFinalizers();
                handle = THSTensor_fftfreq (n, d, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
            }
            if (handle == IntPtr.Zero) { Torch.CheckForErrors(); }
            return new TorchTensor (handle);
        }

        [DllImport("LibTorchSharp")]
        extern static IntPtr THSTensor_rfftfreq(long n, double d, sbyte scalarType, int deviceType, int deviceIndex, bool requiresGrad);

        /// <summary>
        /// Computes the sample frequencies for rfft() with a signal of size n.
        /// </summary>
        static public TorchTensor rfftfreq(long n, double d = 1.0, Device device = null, bool requiresGrad = false)
        {
            device = Torch.InitializeDevice(device);

            var handle = THSTensor_rfftfreq (n, d, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
            if (handle == IntPtr.Zero) {
                GC.Collect();
                GC.WaitForPendingFinalizers();
                handle = THSTensor_rfftfreq (n, d, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
            }
            if (handle == IntPtr.Zero) { Torch.CheckForErrors(); }
            return new TorchTensor (handle);
        }

        [DllImport("LibTorchSharp")]
        extern static IntPtr THSTensor_linspace(double start, double end, long steps, sbyte scalarType, int deviceType, int deviceIndex, bool requiresGrad);

        /// <summary>
        ///  Create a one-dimensional tensor of size steps whose values are evenly spaced from start to end, inclusive.
        /// </summary>
        static public TorchTensor linspace(<#=type.Storage#> start, <#=type.Storage#> end, long steps, Device device = null, bool requiresGrad = false)
        {
            device = Torch.InitializeDevice(device);

            var handle = THSTensor_linspace (start, end, steps, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
            if (handle == IntPtr.Zero) {
                GC.Collect();
                GC.WaitForPendingFinalizers();
                handle = THSTensor_linspace (start, end, steps, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
            }
            if (handle == IntPtr.Zero) { Torch.CheckForErrors(); }
            return new TorchTensor (handle);
        }

        [DllImport("LibTorchSharp")]
        extern static IntPtr THSTensor_logspace(double start, double end, long steps, double @base, sbyte scalarType, int deviceType, int deviceIndex, bool requiresGrad);

        /// <summary>
        ///  Creates a one-dimensional tensor of size steps whose values are evenly spaced from base^start to base^end, inclusive, on a logarithmic scale with base 'base.'
        /// </summary>
        static public TorchTensor logspace(<#=type.Storage#> start, <#=type.Storage#> end, long steps, <#=type.Storage#> @base = 10, Device device = null, bool requiresGrad = false)
        {
            device = Torch.InitializeDevice(device);

            var handle = THSTensor_logspace (start, end, steps, @base, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
            if (handle == IntPtr.Zero) {
                GC.Collect();
                GC.WaitForPendingFinalizers();
                handle = THSTensor_logspace (start, end, steps, @base, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
            }
            if (handle == IntPtr.Zero) { Torch.CheckForErrors(); }
            return new TorchTensor (handle);
        }
        [DllImport("LibTorchSharp")]
        extern static IntPtr THSTensor_bartlett_window(long len, bool periodic, sbyte scalar_type, int device_type, int device_index, bool requires_grad);

        /// <summary>
        /// Bartlett window function.
        /// </summary>
        static public TorchTensor bartlett_window(long len, bool periodic = true, Device device = null, bool requiresGrad = false)
        {
            device = Torch.InitializeDevice(device);

            var handle = THSTensor_bartlett_window (len, periodic, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
            if (handle == IntPtr.Zero) {
                GC.Collect();
                GC.WaitForPendingFinalizers();
                handle = THSTensor_bartlett_window (len, periodic, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
            }
            if (handle == IntPtr.Zero) { Torch.CheckForErrors(); }
            return new TorchTensor (handle);
        }

        [DllImport("LibTorchSharp")]
        extern static IntPtr THSTensor_blackman_window(long len, bool periodic, sbyte scalar_type, int device_type, int device_index, bool requires_grad);

        /// <summary>
        /// Blackman window function.
        /// </summary>
        static public TorchTensor blackman_window(long len, bool periodic = true, Device device = null, bool requiresGrad = false)
        {
            device = Torch.InitializeDevice(device);

            var handle = THSTensor_blackman_window (len, periodic, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
            if (handle == IntPtr.Zero) {
                GC.Collect();
                GC.WaitForPendingFinalizers();
                handle = THSTensor_blackman_window (len, periodic, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
            }
            if (handle == IntPtr.Zero) { Torch.CheckForErrors(); }
            return new TorchTensor (handle);
        }

        [DllImport("LibTorchSharp")]
        extern static IntPtr THSTensor_hamming_window(long len, bool periodic, double alpha, double beta, sbyte scalar_type, int device_type, int device_index, bool requires_grad);

        /// <summary>
        /// Hamming window function.
        /// </summary>
        static public TorchTensor hamming_window(long len, bool periodic = true, <#=type.Storage#> alpha = 0.54f, <#=type.Storage#> beta = 0.46f, Device device = null, bool requiresGrad = false)
        {
            device = Torch.InitializeDevice(device);

            var handle = THSTensor_hamming_window (len, periodic, alpha, beta, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
            if (handle == IntPtr.Zero) {
                GC.Collect();
                GC.WaitForPendingFinalizers();
                handle = THSTensor_hamming_window (len, periodic, alpha, beta, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
            }
            if (handle == IntPtr.Zero) { Torch.CheckForErrors(); }
            return new TorchTensor (handle);
        }

        [DllImport("LibTorchSharp")]
        extern static IntPtr THSTensor_hann_window(long len, bool periodic, sbyte scalar_type, int device_type, int device_index, bool requires_grad);

        /// <summary>
        /// Hann window function.
        /// </summary>
        static public TorchTensor hann_window(long len, bool periodic = true, Device device = null, bool requiresGrad = false)
        {
            device = Torch.InitializeDevice(device);

            var handle = THSTensor_hann_window (len, periodic, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
            if (handle == IntPtr.Zero) {
                GC.Collect();
                GC.WaitForPendingFinalizers();
                handle = THSTensor_hann_window (len, periodic, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
            }
            if (handle == IntPtr.Zero) { Torch.CheckForErrors(); }
            return new TorchTensor (handle);
        }

        [DllImport("LibTorchSharp")]
        extern static IntPtr THSTensor_kaiser_window(long len, bool periodic, double beta, sbyte scalar_type, int device_type, int device_index, bool requires_grad);

        /// <summary>
        /// Computes the Kaiser window with window length window_length and shape parameter beta.
        /// </summary>
        static public TorchTensor kaiser_window(long len, bool periodic = true, <#=type.Storage#> beta = 12.0f, Device device = null, bool requiresGrad = false)
        {
            device = Torch.InitializeDevice(device);

            var handle = THSTensor_kaiser_window (len, periodic, beta, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
            if (handle == IntPtr.Zero) {
                GC.Collect();
                GC.WaitForPendingFinalizers();
                handle = THSTensor_kaiser_window (len, periodic, beta, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
            }
            if (handle == IntPtr.Zero) { Torch.CheckForErrors(); }
            return new TorchTensor (handle);
        }
<# } #>

<#
if (!type.IsComplex) {
#>
        [DllImport("LibTorchSharp")]
        extern static IntPtr THSTensor_new<#=type.Name#>Scalar(<#=type.Storage#> scalar, int deviceType, int deviceIndex, bool requiresGrad);

        /// <summary>
        /// Create a scalar tensor from a single value
        /// </summary>
        public static TorchTensor from(<#=type.Storage#> scalar, Device device = null, bool requiresGrad = false)
        {
            device = Torch.InitializeDevice(device);
            var handle = THSTensor_new<#=type.Name#>Scalar(scalar, (int) device.Type, device.Index, requiresGrad);
            if (handle == IntPtr.Zero) { Torch.CheckForErrors(); }
            return new TorchTensor(handle);
        }
<# } #>

<#
if (type.IsInt64) {
#>
        [DllImport("LibTorchSharp")]
        extern static IntPtr THSTensor_new<#=type.Name#>(IntPtr rawArray, GCHandleDeleter deleter, long[] dimensions, int numDimensions, bool requiresGrad);
<#
} else if (type.IsFloat16 || type.IsBFloat16) {
#>
        [DllImport("LibTorchSharp")]
        extern static IntPtr THSTensor_new<#=type.Name#>(IntPtr rawArray, IntPtr dataArray, GCHandleDeleter deleter, long[] dimensions, int numDimensions, bool requiresGrad);
<#
} else {
#>
        [DllImport("LibTorchSharp")]
        extern static IntPtr THSTensor_new(IntPtr rawArray, GCHandleDeleter deleter, long[] dimensions, int numDimensions, sbyte type, bool requiresGrad);
<# } #>

        /// <summary>
        /// Create a tensor from an array of values, shaping it based on the shape passed in.
        /// </summary>
        /// <remarks>The Torch runtime does not take ownership of the data, so there is no device argument.</remarks>
        public static TorchTensor from(<#=type.Storage#>[] rawArray, long[] dimensions, bool requiresGrad = false)
        {
            Torch.InitializeDeviceType(DeviceType.CPU);
<#
if (type.IsFloat16 || type.IsBFloat16) {
#>
            var dataArray = new Int16[rawArray.Length];
<#
} else if (type.IsComplex32) {
#>
            var dataArray = new float[rawArray.Length * 2];
            for (var i = 0; i < rawArray.Length; i++) {
                dataArray[i*2] = rawArray[i].Real;
                dataArray[i*2 + 1] = rawArray[i].Imaginary;
            }
<#
} else if (type.IsComplex64) {
#>
            var dataArray = new double[rawArray.Length * 2];
            for (var i = 0; i < rawArray.Length; i++) {
                dataArray[i*2] = rawArray[i].Real;
                dataArray[i*2 + 1] = rawArray[i].Imaginary;
            }
<#
} else {
#>
            var dataArray = rawArray;
<# } #>
            unsafe
            {
                var dataHandle = GCHandle.Alloc(dataArray, GCHandleType.Pinned);
                var dataArrayAddr = dataHandle.AddrOfPinnedObject();
                var gchp = GCHandle.ToIntPtr(dataHandle);
                GCHandleDeleter deleter = null;
                deleter =
                    new GCHandleDeleter(delegate (IntPtr ptr) {
                        GCHandle.FromIntPtr(gchp).Free();
                        deleters.TryRemove(deleter, out deleter);
                        });
                deleters.TryAdd(deleter, deleter); // keep the delegate alive
<#
if (type.IsInt64) {
#>
                var handle = THSTensor_new<#=type.Name#>(dataArrayAddr, deleter, dimensions, dimensions.Length, requiresGrad);
                if (handle == IntPtr.Zero) {
                    GC.Collect();
                    GC.WaitForPendingFinalizers();
                    handle = THSTensor_new<#=type.Name#>(dataArrayAddr, deleter, dimensions, dimensions.Length, requiresGrad);
                }
                if (handle == IntPtr.Zero) { Torch.CheckForErrors(); }
                return new TorchTensor(handle);
<#
} else if (type.IsFloat16 || type.IsBFloat16) {
#>
                fixed (<#=type.Storage#>* pRawArray = rawArray)
                {
                    var handle = THSTensor_new<#=type.Name#>((IntPtr)pRawArray, dataArrayAddr, deleter, dimensions, dimensions.Length, requiresGrad);
                    if (handle == IntPtr.Zero) {
                        GC.Collect();
                        GC.WaitForPendingFinalizers();
                        handle = THSTensor_new<#=type.Name#>((IntPtr)pRawArray, dataArrayAddr, deleter, dimensions, dimensions.Length, requiresGrad);
                    }
                    if (handle == IntPtr.Zero) { Torch.CheckForErrors(); }
                    return new TorchTensor(handle);
                }
<#
} else {
#>
                var handle = THSTensor_new(dataArrayAddr, deleter, dimensions, dimensions.Length, (sbyte)ScalarType.<#=type.Name#>, requiresGrad);
                if (handle == IntPtr.Zero) {
                    GC.Collect();
                    GC.WaitForPendingFinalizers();
                    handle = THSTensor_new(dataArrayAddr, deleter, dimensions, dimensions.Length, (sbyte)ScalarType.<#=type.Name#>, requiresGrad);
                }
                if (handle == IntPtr.Zero) { Torch.CheckForErrors(); }
                return new TorchTensor(handle);
<# } #>
            }
        }

        /// <summary>
        /// Create a 1-D tensor from an array of values, shaping it based on the input array.
        /// </summary>
        /// <remarks>The Torch runtime does not take ownership of the data, so there is no device argument.</remarks>
        public static TorchTensor from(<#=type.Storage#>[] rawArray, bool requiresGrad = false)
        {
            return from(rawArray, new long[] { (long)rawArray.Length }, requiresGrad);
        }

        /// <summary>
        /// Create a tensor from an array of values, organizing it as a two-dimensional tensor.
        /// </summary>
        /// <remarks>The Torch runtime does not take ownership of the data, so there is no device argument.
        ///          The input array must have rows * columns elements.
        /// </remarks>
        public static TorchTensor from(<#=type.Storage#>[] rawArray, long rows, long columns, bool requiresGrad = false)
        {
            return from(rawArray, new long[] { rows, columns }, requiresGrad);
        }

        /// <summary>
        /// Create a tensor from an array of values, organizing it as a three-dimensional tensor.
        /// </summary>
        /// <remarks>The Torch runtime does not take ownership of the data, so there is no device argument.
        ///          The input array must have dim0*dim1*dim2 elements.
        /// </remarks>
        public static TorchTensor from(<#=type.Storage#>[] rawArray, long dim0, long dim1, long dim2, bool requiresGrad = false)
        {
            return from(rawArray, new long[] { dim0, dim1, dim2 }, requiresGrad);
        }

        /// <summary>
        /// Create a tensor from an array of values, organizing it as a four-dimensional tensor.
        /// </summary>
        /// <remarks>The Torch runtime does not take ownership of the data, so there is no device argument.
        ///          The input array must have dim0*dim1*dim2*dim3 elements.
        /// </remarks>
        public static TorchTensor from(<#=type.Storage#>[] rawArray, long dim0, long dim1, long dim2, long dim3, bool requiresGrad = false)
        {
            return from(rawArray, new long[] { dim0, dim1, dim2, dim3 }, requiresGrad);
        }

        [DllImport("LibTorchSharp")]
        extern static IntPtr THSTensor_sparse(IntPtr indices, IntPtr values, IntPtr sizes, int length, sbyte type, int deviceType, int deviceIndex, bool requiresGrad);

        /// <summary>
        /// Create a sparse tensor by indexing into an existing dense tensor.
        /// </summary>
        public static TorchTensor sparse(TorchTensor indices, TorchTensor values, long[] size, Device device = null, bool requiresGrad = false)
        {
            device = Torch.InitializeDevice(device);

            unsafe
            {
                fixed (long* psizes = size)
                {
                    var handle = THSTensor_sparse (indices.Handle, values.Handle, (<#=type.Ptr#>)psizes, size.Length, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
                    if (handle == IntPtr.Zero) {
                        GC.Collect();
                        GC.WaitForPendingFinalizers();
                        handle = THSTensor_sparse (indices.Handle, values.Handle, (<#=type.Ptr#>)psizes, size.Length, (sbyte)ScalarType.<#=type.Name#>, (int) device.Type, device.Index, requiresGrad);
                    }
                    if (handle == IntPtr.Zero) { Torch.CheckForErrors(); }
                    return new TorchTensor (handle);
                }
            }
        }
    }
<# } #>
}
