<Project>
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), Directory.Build.props))\Directory.Build.props" />

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <LocalBaseName>$(LibTorchCudaLocalBase)</LocalBaseName>
    <ArchiveBaseName>$(LibTorchCudaArchiveBase)</ArchiveBaseName>
    <ArchiveExtension>.zip</ArchiveExtension>
    <ArchiveUrl>https://download.pytorch.org/libtorch/cu$(CudaVersion)/$(ArchiveBaseName)$(ArchiveExtension)</ArchiveUrl>
    <Runtime Condition="'$(TargetOS)' == 'windows'">win-x64</Runtime>
    <Runtime Condition="'$(TargetOS)' == 'linux'">linux-x64</Runtime>

    <DownloadedArchiveFolder>$(MassiveDownloadRoot)$(MSBuildProjectName)\</DownloadedArchiveFolder>
    <DownloadedArchiveFileName>$(ArchiveBaseName)$(ArchiveExtension)</DownloadedArchiveFileName>
    <DownloadedArchive>$(DownloadedArchiveFolder)$(DownloadedArchiveFileName)</DownloadedArchive>
    <ArchiveShaFile>$(IntermediateOutputPath)$(ArchiveBaseName)$(ArchiveExtension).sha</ArchiveShaFile>
    <ExtractDirectory>$(IntermediateOutputPath)$(LocalBaseName)</ExtractDirectory>
    <ExtractSemaphore>$(ExtractDirectory)\.extracted</ExtractSemaphore>
    <LocalShaFile>$(MSBuildProjectDirectory)\$(ArchiveBaseName)$(ArchiveExtension).sha</LocalShaFile>
    <LicenseUrl>https://raw.githubusercontent.com/pytorch/pytorch/master/LICENSE</LicenseUrl>
    <DownloadedLicenseFolder>$(IntermediateOutputPath)</DownloadedLicenseFolder>
    <DownloadedLicenseFileName>LICENSE-LIBTORCH</DownloadedLicenseFileName>
    <DownloadedLicenseFile>$(DownloadedLicenseFolder)$(DownloadedLicenseFileName)</DownloadedLicenseFile>
    <MainPackageFolder>$(PackagePreparationPath)$(MSBuildProjectName)-$(Runtime)</MainPackageFolder>
    <CopyToPackageSemaphore>$(MainPackageFolder)\.copied</CopyToPackageSemaphore>

  </PropertyGroup>
  
  <ItemGroup Condition="'$(TargetOS)' == 'windows'">

    <File Include= "libtorch\lib\asmjit.dll" PackageSuffix="part1" />
    <File Include= "libtorch\lib\c10.dll" PackageSuffix="part1" />
    <File Include= "libtorch\lib\c10_cuda.dll" PackageSuffix="part1" />
    <File Include= "libtorch\lib\caffe2_detectron_ops_gpu.dll" PackageSuffix="part1" />
    <File Include= "libtorch\lib\caffe2_module_test_dynamic.dll" PackageSuffix="part1" />
    <File Include= "libtorch\lib\caffe2_nvrtc.dll" PackageSuffix="part1" />
    <File Include= "libtorch\lib\cublas64_11.dll" PackageSuffix="part1" />
    <File Include= "libtorch\lib\cublasLt64_11.dll" PackageSuffix="part1" />
    <File Include= "libtorch\lib\cudart64_110.dll" PackageSuffix="part1" />

    <File Include= "libtorch\lib\cudnn_adv_infer64_8.dll" PackageSuffix="part2" />
    <File Include= "libtorch\lib\cudnn_adv_train64_8.dll" PackageSuffix="part2" />

    <File Include= "libtorch\lib\cudnn_cnn_infer64_8.dll"  PackageSuffix="part3-primary" FileUnstitchIndex="0" FileUnstitchStart="0" FileUnstitchSize="250000000" />
    <File Include= "libtorch\lib\cudnn_cnn_infer64_8.dll"  PackageSuffix="part3-fragment1" FileUnstitchIndex="1" FileUnstitchStart="250000000" FileUnstitchSize="-1" />

    <File Include= "libtorch\lib\cudnn_cnn_train64_8.dll" PackageSuffix="part4" />
    <File Include= "libtorch\lib\cudnn_ops_infer64_8.dll" PackageSuffix="part4" />
    <File Include= "libtorch\lib\cudnn_ops_train64_8.dll" PackageSuffix="part4" />

    <File Include= "libtorch\lib\cudnn64_8.dll" PackageSuffix="part5" />
    <File Include= "libtorch\lib\cufft64_10.dll" PackageSuffix="part5" />

    <File Include= "libtorch\lib\cufftw64_10.dll" PackageSuffix="part6" />
    <File Include= "libtorch\lib\curand64_10.dll" PackageSuffix="part6" />
    <File Include= "libtorch\lib\cusolverMg64_11.dll" PackageSuffix="part6" />
    <File Include= "libtorch\lib\fbgemm.dll" PackageSuffix="part6" />
    <File Include= "libtorch\lib\fbjni.dll" PackageSuffix="part6" />
    <File Include= "libtorch\lib\libiomp5md.dll" PackageSuffix="part6" />
    <File Include= "libtorch\lib\libiompstubs5md.dll" PackageSuffix="part6" />
    <File Include= "libtorch\lib\nvrtc64_111_0.dll" PackageSuffix="part6" />
    <File Include= "libtorch\lib\nvrtc-builtins64_111.dll" PackageSuffix="part6" />
    <File Include= "libtorch\lib\nvToolsExt64_1.dll" PackageSuffix="part6" />
    <File Include= "libtorch\lib\pytorch_jni.dll" PackageSuffix="part6" />
    <File Include= "libtorch\lib\torch.dll" PackageSuffix="part6" />
    <File Include= "libtorch\lib\torch_global_deps.dll" PackageSuffix="part6" />
    <File Include= "libtorch\lib\uv.dll" PackageSuffix="part6" />

    <File Include= "libtorch\lib\cusolver64_11.dll"  PackageSuffix="part7-primary" FileUnstitchIndex="0" FileUnstitchStart="0" FileUnstitchSize="250000000" />
    <File Include= "libtorch\lib\cusolver64_11.dll"  PackageSuffix="part7-fragment1" FileUnstitchIndex="1" FileUnstitchStart="250000000" FileUnstitchSize="-1" />

    <File Include= "libtorch\lib\cusparse64_11.dll" PackageSuffix="part8" />
    <File Include= "libtorch\lib\torch_cpu.dll" PackageSuffix="part8" />
    <File Include= "libtorch\lib\torch_cuda.dll" PackageSuffix="part8" />
    <File Include= "libtorch\lib\torch_cuda_cpp.dll" PackageSuffix="part8" />

    <!-- This vast file needs a special magic, we split it into multiple chunks in different packages. -->
    <File Include= "libtorch\lib\torch_cuda_cu.dll"  PackageSuffix="part9-primary" FileUnstitchIndex="0" FileUnstitchStart="0" FileUnstitchSize="250000000" />
    <File Include= "libtorch\lib\torch_cuda_cu.dll"  PackageSuffix="part9-fragment1" FileUnstitchIndex="1" FileUnstitchStart="250000000" FileUnstitchSize="250000000" />
    <File Include= "libtorch\lib\torch_cuda_cu.dll"  PackageSuffix="part9-fragment2" FileUnstitchIndex="2" FileUnstitchStart="500000000" FileUnstitchSize="250000000" />
    <File Include= "libtorch\lib\torch_cuda_cu.dll"  PackageSuffix="part9-fragment3" FileUnstitchIndex="3" FileUnstitchStart="750000000" FileUnstitchSize="250000000" />
    <File Include= "libtorch\lib\torch_cuda_cu.dll"  PackageSuffix="part9-fragment4" FileUnstitchIndex="4" FileUnstitchStart="1000000000" FileUnstitchSize="-1" />

  </ItemGroup>
  <ItemGroup Condition="'$(TargetOS)' == 'linux'">
    <File Include= "libtorch\lib\libc10.so"  PackageSuffix="part1"  />
    <File Include= "libtorch\lib\libc10_cuda.so"  PackageSuffix="part1"  />
    <File Include= "libtorch\lib\libc10d_cuda_test.so"  PackageSuffix="part1"  />
    <File Include= "libtorch\lib\libcaffe2_detectron_ops_gpu.so"  PackageSuffix="part1"  />
    <File Include= "libtorch\lib\libcaffe2_module_test_dynamic.so"  PackageSuffix="part1"  />
    <File Include= "libtorch\lib\libcaffe2_nvrtc.so"  PackageSuffix="part1"  />
    <File Include= "libtorch\lib\libcaffe2_observers.so"  PackageSuffix="part1"  />
    <File Include= "libtorch\lib\libfbjni.so"  PackageSuffix="part1"  />
    <File Include= "libtorch\lib\libjitbackend_test.so"  PackageSuffix="part1"  />
    <File Include= "libtorch\lib\libnvrtc-builtins.so"  PackageSuffix="part1"  />
    <File Include= "libtorch\lib\libprocess_group_agent.so"  PackageSuffix="part1"  />
    <File Include= "libtorch\lib\libpytorch_jni.so"  PackageSuffix="part1"  />
    <File Include= "libtorch\lib\libshm.so"  PackageSuffix="part1"  />
    <File Include= "libtorch\lib\libtensorpipe_agent.so"  PackageSuffix="part1"  />
    <File Include= "libtorch\lib\libtorch.so"  PackageSuffix="part1"  />
    <File Include= "libtorch\lib\libtorch_cpu.so"  PackageSuffix="part1"  />
    <File Include= "libtorch\lib\libtorch_global_deps.so" PackageSuffix="part1"  />
    <File Include= "libtorch\lib\libtorch_python.so" PackageSuffix="part1"  />
    <File Include= "libtorch\lib\libtorchbind_test.so" PackageSuffix="part1"  />
    <File Include= "libtorch\lib\libcudart-6d56b25a.so.11.0" PackageSuffix="part1"  />
    <File Include= "libtorch\lib\libnvrtc-3a20f2b6.so.11.1" PackageSuffix="part1"  />
    <File Include= "libtorch\lib\libgomp-7c85b1e2.so.1" PackageSuffix="part1"  />
    <File Include= "libtorch\lib\libnvToolsExt-24de1d56.so.1" PackageSuffix="part1"  />
    
    <!-- This vast file needs a special magic, we split it into multiple chunks in different packages. -->
    <!-- The chunks actually all have the same size but have different sections zero'd out. We "or" the bits back together on package restore. -->
    <File Include= "libtorch\lib\libtorch_cuda_cpp.so"  PackageSuffix="part2-primary" FileUnstitchIndex="0" FileUnstitchStart="0" FileUnstitchSize="250000000" />
    <File Include= "libtorch\lib\libtorch_cuda_cpp.so"  PackageSuffix="part2-fragment1" FileUnstitchIndex="1" FileUnstitchStart="250000000" FileUnstitchSize="250000000" />
    <File Include= "libtorch\lib\libtorch_cuda_cpp.so"  PackageSuffix="part2-fragment2" FileUnstitchIndex="2" FileUnstitchStart="500000000" FileUnstitchSize="250000000" />
    <File Include= "libtorch\lib\libtorch_cuda_cpp.so"  PackageSuffix="part2-fragment3" FileUnstitchIndex="3" FileUnstitchStart="750000000" FileUnstitchSize="250000000" />
    <File Include= "libtorch\lib\libtorch_cuda_cpp.so"  PackageSuffix="part2-fragment4" FileUnstitchIndex="4" FileUnstitchStart="1000000000" FileUnstitchSize="250000000" />
    <File Include= "libtorch\lib\libtorch_cuda_cpp.so"  PackageSuffix="part2-fragment5" FileUnstitchIndex="5" FileUnstitchStart="1250000000" FileUnstitchSize="250000000" />
    <File Include= "libtorch\lib\libtorch_cuda_cpp.so"  PackageSuffix="part2-fragment6" FileUnstitchIndex="6" FileUnstitchStart="1500000000" FileUnstitchSize="250000000" />
    <File Include= "libtorch\lib\libtorch_cuda_cpp.so"  PackageSuffix="part2-fragment7" FileUnstitchIndex="7" FileUnstitchStart="1750000000" FileUnstitchSize="-1" />
    
    <!-- This vast file needs a special magic, we split it into multiple chunks in different packages. -->
    <!-- The chunks actually all have the same size but have different sections zero'd out. We "or" the bits back together on package restore. -->
    <File Include= "libtorch\lib\libtorch_cuda_cu.so"  PackageSuffix="part3-primary" FileUnstitchIndex="0" FileUnstitchStart="0" FileUnstitchSize="250000000" />
    <File Include= "libtorch\lib\libtorch_cuda_cu.so"  PackageSuffix="part3-fragment1" FileUnstitchIndex="1" FileUnstitchStart="250000000" FileUnstitchSize="250000000" />
    <File Include= "libtorch\lib\libtorch_cuda_cu.so"  PackageSuffix="part3-fragment2" FileUnstitchIndex="2" FileUnstitchStart="500000000" FileUnstitchSize="250000000" />
    <File Include= "libtorch\lib\libtorch_cuda_cu.so"  PackageSuffix="part3-fragment3" FileUnstitchIndex="3" FileUnstitchStart="750000000" FileUnstitchSize="-1" />

    <File Include= "libtorch\lib\libtorch_cuda.so"  PackageSuffix="part4"  />

  </ItemGroup>

  <Target Name="DownloadArchive" Inputs="..\..\..\LICENSE" Outputs="$(DownloadedArchive);$(DownloadedLicenseFile)">
    <MakeDir Directories="$(DownloadedArchiveFolder)" />
    <MakeDir Directories="$(DownloadedLicenseFolder)" />
    <DownloadFile  SourceUrl="$(ArchiveUrl)" DestinationFolder="$(DownloadedArchiveFolder)" DestinationFileName="$(DownloadedArchiveFileName)" Condition="!Exists('$(DownloadedArchive)')" />
    <DownloadFile  SourceUrl="$(LicenseUrl)" DestinationFolder="$(DownloadedLicenseFolder)" DestinationFileName="$(DownloadedLicenseFileName)" Condition="!Exists('$(DownloadedLicense)')" />
  </Target>
  
  <!-- Validate and extract Archive for Libtorch -->
  <Target Name="ValidateAndExtractArchives" DependsOnTargets="DownloadArchive" Inputs="$(DownloadedArchive)" Outputs="$(ExtractSemaphore)">
    <Message Importance="High" Text="GetFileHash $(DownloadedArchive)" />
    <GetFileHash  Files="$(DownloadedArchive)">  <Output TaskParameter="Hash" PropertyName="DownloadedArchiveHash" /> </GetFileHash>
    <WriteLinesToFile File="$(ArchiveShaFile)" Lines="$(DownloadedArchiveHash)" Overwrite="true" />

    <!-- If specified we'll update the checked in SHAs with the downloaded ones. -->
    <Copy Condition="'$(UpdateSHA)' == 'true'" SourceFiles="$(ArchiveShaFile)" DestinationFiles="$(LocalShaFile)" />

    <Error Condition="!Exists('$(LocalShaFile)')" Text="SHA file '$(LocalShaFile)' does not exist.  Build with /p:UpdateSHA=true to save it." />

    <!-- Read in the SHAs as metadata on the archive items -->
    <ItemGroup>
      <Archive>
        <LocalSha>$([System.IO.File]::ReadAllText('$(LocalShaFile)'))</LocalSha>
        <DownloadSha>$([System.IO.File]::ReadAllText('$(ArchiveShaFile)'))</DownloadSha>
      </Archive>
    </ItemGroup>

    <!-- Validate that the downloaded SHAs match the expected checked in SHAs -->
    <Error Condition="'%(Archive.LocalSha)' != '%(Archive.DownloadSha)'" Text="Downloaded file '$(DownloadedArchive)' has unexpected SHA.%0A  expected: %(Archive.LocalSha)%0A  actual: %(Archive.DownloadSha)%0ABuild with /p:UpdateSHA=true if you intentionally changed the URL and wish to update the SHAs, otherwise this could indicate an incomplete download or intercerpted URL and should be examined." />

    <!-- The archives are valid, lets extract them, ensuring an empty directory -->
    <RemoveDir Directories="$(ExtractDirectory)" />
    <MakeDir Directories="$(ExtractDirectory)" />
    <Message Importance="High" Text="Unzip $(DownloadedArchive) --> $(ExtractDirectory)" />
    <Unzip Condition="'$(ArchiveExtension)' == '.zip'" SourceFiles="$(DownloadedArchive)" DestinationFolder="$(ExtractDirectory)" OverwriteReadOnlyFiles="true" />
    <Exec Condition="'$(ArchiveExtension)' == '.tar.gz'"
          WorkingDirectory="$(ExtractDirectory)"
          Command="tar -xzmf &quot;$([MSBuild]::MakeRelative('$(ExtractDirectory)', '$(DownloadedArchive)'))&quot;" />
    <WriteLinesToFile File="$(ExtractSemaphore)" Lines="done" Overwrite="true" />

    <!-- delete the archive files when running on CI -->
    <Message Importance="High" Text="Deleting '$(DownloadedArchive)' to free up space." Condition="'$(TF_BUILD)' != ''"  />
    <Delete Files="$(DownloadedArchive)"  Condition="'$(TF_BUILD)' != ''" />

  </Target>

    <!-- Hack vast files into separate pieces so we can place them in separate nuget packages. -->
  <UsingTask
    TaskName="FileUnstitch"
    TaskFactory="RoslynCodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
    <ParameterGroup>
      <SourceFile ParameterType="System.String" Required="true" />
      <DestinationFolder ParameterType="System.String" Required="true" />
      <Start ParameterType="System.Int32" Required="true" />
      <Size ParameterType="System.Int32" Required="true" />
      <Index ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System"/>
      <Using Namespace="System.IO"/>
      <Using Namespace="System.IO.MemoryMappedFiles"/>
      <Code Type="Fragment" Language="cs">
<![CDATA[
            {
                string name = Path.GetFileName(SourceFile) + ((Start == 0) ? "" : ".fragment" + Index);
                if (Size == -1)
                    Size = Int32.MaxValue;
                var fi = new FileInfo(SourceFile);
                Console.WriteLine($"Opening source {SourceFile} for fragment {Index}...");
                using (var mmf = MemoryMappedFile.CreateFromFile(SourceFile))
                {
                    var totSize = (int)fi.Length;
                    if (Start != 0)
                        DestinationFolder = DestinationFolder.Replace("runtimes", "fragments");
                    Directory.CreateDirectory(DestinationFolder);
                    string outfile = Path.Combine(DestinationFolder, name);
                    Size = Math.Max(Math.Min(Size, totSize - Start), 0);
                    Console.WriteLine($"Reading fragment {Index} ({Start}..{Start + Size - 1}) from {SourceFile}...");
                    var outBytes = new byte[Size];
                    using (var accessor = mmf.CreateViewAccessor(Start, Size))
                    {
                        accessor.ReadArray<byte>(0, outBytes, 0, Size);
                    }
                    Console.WriteLine($"Writing fragment to {outfile}...");
                    File.WriteAllBytes(outfile, outBytes);
                }
            }
            if (Start == 0)
            {
                using (var sha256Hash = System.Security.Cryptography.SHA256.Create())
                {
                    using (FileStream stream = File.OpenRead(SourceFile))
                    {
                        Console.WriteLine("Computing SHA...");
                        byte[] bytes = sha256Hash.ComputeHash(stream);
                        var builder = new System.Text.StringBuilder();
                        for (int i = 0; i < bytes.Length; i++)
                        {
                            builder.Append(bytes[i].ToString("x2"));
                        }
                        var sha = builder.ToString();
                        string shaFileName = Path.Combine(DestinationFolder, Path.GetFileName(SourceFile) + ".sha");
                        File.WriteAllText(shaFileName, sha);
                        Console.WriteLine($"Computed SHA {sha}...");
                    }
                }
            }
]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="CopyFilesFromArchive" DependsOnTargets="ValidateAndExtractArchives" Inputs="$(ExtractSemaphore)" Outputs="$(CopyToPackageSemaphore)">
    <Message Importance="High" Text="@(File) -> $(MainPackageFolder)-%(File.PackageSuffix)\runtimes\$(Runtime)\native\" />

    <Copy SourceFiles="$(ExtractDirectory)\%(File.Identity)" DestinationFolder="$(MainPackageFolder)-%(File.PackageSuffix)\runtimes\$(Runtime)\native\" SkipUnchangedFiles="true" Condition="'%(File.FileUnstitchStart)' == ''" />
    <FileUnstitch SourceFile="$(ExtractDirectory)\%(File.Identity)" DestinationFolder="$(MainPackageFolder)-%(File.PackageSuffix)\runtimes\$(Runtime)\native\" Start="%(File.FileUnstitchStart)" Size="%(File.FileUnstitchSize)" Index="%(File.FileUnstitchIndex)" Condition="'%(File.FileUnstitchStart)' != ''" />

    <!-- Copy to NativeCudaOutputPath to use in tests -->
    <MakeDir Directories="$(NativeCudaOutputPath)"  Condition="'$(SkipCuda)' != 'true'"  />
    <Copy SourceFiles="$(ExtractDirectory)\%(File.Identity)" DestinationFolder="$(NativeCudaOutputPath)" SkipUnchangedFiles="true" Condition="'$(SkipCuda)' != 'true' AND ('%(File.FileUnstitchStart)' == '' OR '%(File.FileUnstitchStart)' == '0') " />

    <Copy SourceFiles="$(DownloadedLicenseFile)" DestinationFolder="$(MainPackageFolder)\" SkipUnchangedFiles="true"  />
    <WriteLinesToFile File="$(CopyToPackageSemaphore)" Lines="done" Overwrite="true" />

  </Target>

  <!-- Define Build to do the work of downloading and copying assets -->
  <Target Name="Build" DependsOnTargets="CopyFilesFromArchive"  />

  <Target Name="Clean">
    <RemoveDir Directories="$(IntermediateOutputPath)" />
  </Target>
</Project>
