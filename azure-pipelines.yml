################################################################################
# TorchSharp's PR validation build
################################################################################

name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

variables: 
  MyRunNumber:  $[counter('MyRunNumber', 52201)]
  
  # Set this to 'true' to build the libtorch-* packages as part of master branch CI and
  # push them to the artifacts feed of the Azure CI project
  BuildLibTorchPackages: false

jobs:
- template: /build/ci/job-template.yml
  parameters:
    name: Ubuntu_x64
    prepScript:  sudo apt-get -y update && sudo apt-get -y install clang-6.0 git cmake libunwind8 curl libomp-dev libomp5
    buildScript: dotnet build /p:SkipCuda=true -c 
    testScript: dotnet test /p:SkipCuda=true -c 
    pool:
      vmImage: 'ubuntu-18.04'

# - template: /build/ci/job-template.yml
#   parameters:
#     prepScript: brew update && brew install libomp && brew install mono-libgdiplus gettext && brew link gettext --force && brew link libomp --force
#     name: MacOS_x64
#     buildScript: ./dotnet build /p:SkipCuda=true -c 
#     testScript: ./dotnet test /p:SkipCuda=true -c 
#     pool:
#       vmImage: 'macos-10.15'

- template: /build/ci/job-template.yml
  parameters:
    prepScript: echo "no prep needed"
    name: Windows_x64
    buildScript: dotnet build /p:SkipCuda=true -c 
    testScript: dotnet test /p:SkipCuda=true -c 
    pool:
      vmImage: 'windows-2019'

################################################################################
# {Build} --> combine --> package to build native bits on multiple OS's
################################################################################


################################################################################
- job: Linux_Native_Build_For_Packages
################################################################################
  condition: and(ne(variables['system.pullrequest.isfork'], true), eq(variables['build.sourcebranchname'], 'master'))
  variables:
    BuildConfig: Release
    OfficialBuildId: $(BUILD.BUILDNUMBER)
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_MULTILEVEL_LOOKUP: 0
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script: ldd --version
    displayName: Show ldd version
  - script: sudo apt list
  - script: sudo apt-get -y install clang-6.0 git cmake libunwind8 curl libomp-dev libomp5
  - script: dotnet build -c $(BuildConfig) src/TorchSharp/TorchSharp.csproj /p:SkipTests=true /p:IncludeTorchSharpPackage=true /p:IncludeLibTorchCpuPackage=$(BuildLibTorchPackages) /p:IncludeLibTorchCudaPackages=$(BuildLibTorchPackages)
    displayName: Build
  - script: ldd --version
    displayName: Show ldd version
  - script: ldd `find bin -name libLibTorchSharp.so`
    displayName: Show linux native dependencies
  - publish: $(Build.SourcesDirectory)/bin/obj/packprep/$(BuildConfig)
    artifact: LinuxAssets

################################################################################
- job: Windows_Native_Build_For_Packages
################################################################################
  condition: and(ne(variables['system.pullrequest.isfork'], true), eq(variables['build.sourcebranchname'], 'master'))
  variables:
    BuildConfig: Release
    OfficialBuildId: $(BUILD.BUILDNUMBER)
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_MULTILEVEL_LOOKUP: 0
  pool:
    vmImage: 'windows-2019'
  steps:
  - script: dotnet build -c $(BuildConfig) src/TorchSharp/TorchSharp.csproj /p:SkipTests=true /p:IncludeTorchSharpPackage=true /p:IncludeLibTorchCpuPackage=$(BuildLibTorchPackages) /p:IncludeLibTorchCudaPackages=$(BuildLibTorchPackages)
    displayName: Build Windows

  - publish: $(Build.SourcesDirectory)/bin/obj/packprep/$(BuildConfig)
    artifact: WindowsAssets

# ################################################################################
# - job: MacOS_Native_Build_For_Packages
# ################################################################################
#   condition: and(ne(variables['system.pullrequest.isfork'], true), eq(variables['build.sourcebranchname'], 'master'))
#   variables:
#     BuildConfig: Release
#     OfficialBuildId: $(BUILD.BUILDNUMBER)
#     DOTNET_CLI_TELEMETRY_OPTOUT: 1
#     DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
#     DOTNET_MULTILEVEL_LOOKUP: 0
#   pool:
#     vmImage: 'macos-10.15'
#   steps:
#   - script: brew update && brew install libomp && brew install llvm && brew install mono-libgdiplus gettext && brew link gettext --force && brew link libomp --force && brew link llvm --force
#     displayName: Install build dependencies (macOS)
#   - script: ls -Flas /usr/local/opt/llvm/bin/
#     displayName: Debug Stuff
#   - script: dotnet build -c $(BuildConfig)
#     displayName: Build

#   - task: PublishBuildArtifacts@1
#     displayName: Publish macOS package assets
#   - publish: $(Build.SourcesDirectory)/bin/obj/$(BuildConfig)/packages
#     artifact: MacAssets


################################################################################
- job: Build_And_Push_TorchSharp_And_libtorch_cpu_Packages
################################################################################
  condition: and(ne(variables['system.pullrequest.isfork'], true), eq(variables['build.sourcebranchname'], 'master'))
  dependsOn:
  - Linux_Native_Build_For_Packages
  - Windows_Native_Build_For_Packages
  # - MacOS_Native_Build_For_Packages
  variables:
    BuildConfig: Release
    OfficialBuildId: $(BUILD.BUILDNUMBER)
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_MULTILEVEL_LOOKUP: 0
  pool:
    vmImage: 'windows-2019'
  steps:

  # We are 10GB space-constrained on the Azure Pipelines CI system so clean up what we can 
  # yup we even nuke the .git
  - script: rmdir /q /s .git
    displayName: Clean up space (.git)
    continueOnError: true

    # Download all bits contributing to the packages from the Linux and Mac builds
  - download: current
    artifact: LinuxAssets

  - task: CopyFiles@2
    displayName: Copy linux native assets (TorchSharp) to correct folder where the bits contributing to the packages are assembled
    inputs:
      sourceFolder: $(Pipeline.Workspace)/LinuxAssets/TorchSharp
      targetFolder: $(Build.SourcesDirectory)/bin/obj/packprep/$(BuildConfig)/TorchSharp
  
  - task: CopyFiles@2
    displayName: Copy linux native assets (libtorch-cpu) to correct folder where the bits contributing to the packages are assembled
    inputs:
      sourceFolder: $(Pipeline.Workspace)/LinuxAssets/libtorch-cpu
      targetFolder: $(Build.SourcesDirectory)/bin/obj/packprep/$(BuildConfig)/libtorch-cpu
  
  - script: rmdir /s /q  $(Pipeline.Workspace)\LinuxAssets
    displayName: Free up space (linux assets in workspace)

  - download: current
    artifact: WindowsAssets

  - task: CopyFiles@2
    displayName: Copy windows native assets (TorchSharp) to correct folder where the bits contributing to the packages are assembled
    inputs:
      sourceFolder: $(Pipeline.Workspace)/WindowsAssets/TorchSharp
      targetFolder: $(Build.SourcesDirectory)/bin/obj/packprep/$(BuildConfig)/TorchSharp
  
  - task: CopyFiles@2
    displayName: Copy windows native assets (libtorch-cpu) to correct folder where the bits contributing to the packages are assembled
    inputs:
      sourceFolder: $(Pipeline.Workspace)/WindowsAssets/libtorch-cpu
      targetFolder: $(Build.SourcesDirectory)/bin/obj/packprep/$(BuildConfig)/libtorch-cpu
  
  - script: rmdir /s /q  $(Pipeline.Workspace)\WindowsAssets
    displayName: Free up space (windows assets in workspace)

  # Pack TorchSharp (and libtorch-cpu if BuildLibTorchPackages is true)
  - script: dotnet pack -c $(BuildConfig) --no-build -v:n /p:SkipNative=true /p:SkipTests=true /p:IncludeTorchSharpPackage=true /p:IncludeLibTorchCpuPackage=$(BuildLibTorchPackages) src/TorchSharp/TorchSharp.csproj
    displayName: Create Packages

  - script: rmdir /q /s bin\obj
    displayName: Clean up space (bin\obj)
    continueOnError: true

  - task: CopyFiles@2
    displayName: Copy packaged assets to staging folder
    inputs:
      sourceFolder: $(Build.SourcesDirectory)/bin/packages/$(BuildConfig)
      targetFolder: $(Build.ArtifactStagingDirectory)
 
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: packages
  
  # Push packages to feed
  #
  # Doing these one by one as we're getting a lot of failures pushing them
  # Also replaying them multiple times for the same reason
  #
  - task: NuGetAuthenticate@0
    displayName: 'NuGet Authenticate'

  - task: NuGetCommand@2
    displayName: 'NuGet push (TorchSharp)'
    inputs:
      command: push
      packagesToPush:  '$(Build.ArtifactStagingDirectory)/**/TorchSharp*.nupkg'
      publishVstsFeed: 'TorchSharp/packages2'
      allowPackageConflicts: true
    continueOnError: true

  # push the CPU runtime packages
  - task: NuGetCommand@2
    displayName: 'NuGet push (libtorch-cpu)'
    inputs:
      command: push
      packagesToPush:  '$(Build.ArtifactStagingDirectory)/**/libtorch-cpu*.nupkg'
      publishVstsFeed: 'TorchSharp/packages2'
      allowPackageConflicts: true
    continueOnError: true

  # push the CPU runtime packages (retry - we get so many failures!)
  - task: NuGetCommand@2
    displayName: 'NuGet push (libtorch-cpu - retry)'
    inputs:
      command: push
      packagesToPush:  '$(Build.ArtifactStagingDirectory)/**/libtorch-cpu*.nupkg'
      publishVstsFeed: 'TorchSharp/packages2'
      allowPackageConflicts: true
    continueOnError: true

  # push the CPU runtime packages (retry - we get so many failures!)
  - task: NuGetCommand@2
    displayName: 'NuGet push (libtorch-cpu - retry)'
    inputs:
      command: push
      packagesToPush:  '$(Build.ArtifactStagingDirectory)/**/libtorch-cpu*.nupkg'
      publishVstsFeed: 'TorchSharp/packages2'
      allowPackageConflicts: true
    continueOnError: true

  # Terminate all dotnet build processes.
  - script: dotnet build-server shutdown
    displayName: Dotnet Server Shutdown

################################################################################
# Only run if BuildLibTorchPackages is true
- job: Build_And_Push_libtorch_cuda_win_Packages
################################################################################
  condition: and(ne(variables['system.pullrequest.isfork'], true), eq(variables['build.sourcebranchname'], 'master'), eq(variables['BuildLibTorchPackages'], 'true'))
  dependsOn:
  - Windows_Native_Build_For_Packages
  # - MacOS_Native_Build_For_Packages
  variables:
    BuildConfig: Release
    OfficialBuildId: $(BUILD.BUILDNUMBER)
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_MULTILEVEL_LOOKUP: 0
  pool:
    vmImage: 'windows-2019'
  steps:

  # We are 10GB space-constrained on the Azure Pipelines CI system so clean up what we can 
  # yup we even nuke the .git
  - script: rmdir /q /s .git
    displayName: Clean up space (.git)
    continueOnError: true

  - download: current
    artifact: WindowsAssets

  - task: CopyFiles@2
    displayName: Copy windows native assets to correct folder where the bits contributing to the packages are assembled
    inputs:
      sourceFolder: $(Pipeline.Workspace)/WindowsAssets
      targetFolder: $(Build.SourcesDirectory)/bin/obj/packprep/$(BuildConfig)
  
  - script: rmdir /s /q  $(Pipeline.Workspace)\WindowsAssets
    displayName: Free up space (windows assets in workspace)

  - script: dotnet pack -c $(BuildConfig) --no-build -v:n /p:SkipNative=true /p:SkipTests=true /p:IncludeTorchSharpPackage=false /p:IncludeLibTorchCpuPackage=false /p:IncludeLibTorchCudaPackages=true src/TorchSharp/TorchSharp.csproj
    displayName: Create Packages

  # We are 10GB space-constrained on the Azure Pipelines CI system so clean up what we can 
  - script: rmdir /q /s bin\obj
    displayName: Clean up space (bin\obj)
    continueOnError: true

  - task: CopyFiles@2
    displayName: Copy packaged assets to staging folder
    inputs:
      sourceFolder: $(Build.SourcesDirectory)/bin/packages/$(BuildConfig)
      targetFolder: $(Build.ArtifactStagingDirectory)
 
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: packages
  

  # Push packages to feed
  #
  # Doing these one by one as we're getting a lot of failures pushing them
  # Also replaying them multiple times for the same reason
  #
  - task: NuGetAuthenticate@0
    displayName: 'NuGet Authenticate'

  # push the Windows Cuda packages as they are useful even if pushing the huge and messy Linux cuda packages fails
  - task: NuGetCommand@2
    displayName: 'NuGet push (cuda win-x64)'
    inputs:
      command: push
      packagesToPush:  '$(Build.ArtifactStagingDirectory)/**/*cuda*win-x64*.nupkg'
      publishVstsFeed: 'TorchSharp/packages2'
      allowPackageConflicts: true
      # often fails - try but ignore the error until we sort it out
    continueOnError: true

  # push the Windows Cuda packages as they are useful even if pushing the huge and messy Linux cuda packages fails
  - task: NuGetCommand@2
    displayName: 'NuGet push (cuda win-x64 retry)'
    inputs:
      command: push
      packagesToPush:  '$(Build.ArtifactStagingDirectory)/**/*cuda*win-x64*.nupkg'
      publishVstsFeed: 'TorchSharp/packages2'
      allowPackageConflicts: true
      # often fails - try but ignore the error until we sort it out
    continueOnError: true

  # push the Windows Cuda packages as they are useful even if pushing the huge and messy Linux cuda packages fails
  - task: NuGetCommand@2
    displayName: 'NuGet push (cuda win-x64 retry)'
    inputs:
      command: push
      packagesToPush:  '$(Build.ArtifactStagingDirectory)/**/*cuda*win-x64*.nupkg'
      publishVstsFeed: 'TorchSharp/packages2'
      allowPackageConflicts: true
      # often fails - try but ignore the error until we sort it out
    continueOnError: true

  # push the Windows Cuda packages as they are useful even if pushing the huge and messy Linux cuda packages fails
  - task: NuGetCommand@2
    displayName: 'NuGet push (cuda win-x64 retry)'
    inputs:
      command: push
      packagesToPush:  '$(Build.ArtifactStagingDirectory)/**/*cuda*win-x64*.nupkg'
      publishVstsFeed: 'TorchSharp/packages2'
      allowPackageConflicts: true
      # often fails - try but ignore the error until we sort it out
    continueOnError: true

  # push the Windows Cuda packages as they are useful even if pushing the huge and messy Linux cuda packages fails
  - task: NuGetCommand@2
    displayName: 'NuGet push (cuda win-x64 retry)'
    inputs:
      command: push
      packagesToPush:  '$(Build.ArtifactStagingDirectory)/**/*cuda*win-x64*.nupkg'
      publishVstsFeed: 'TorchSharp/packages2'
      allowPackageConflicts: true
      # often fails - try but ignore the error until we sort it out
    continueOnError: true

################################################################################
- job: Build_And_Push_libtorch_cuda_linux_Packages
################################################################################
  condition: and(ne(variables['system.pullrequest.isfork'], true), eq(variables['build.sourcebranchname'], 'master'), eq(variables['BuildLibTorchPackages'], 'true'))
  dependsOn:
  - Linux_Native_Build_For_Packages
  variables:
    BuildConfig: Release
    OfficialBuildId: $(BUILD.BUILDNUMBER)
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_MULTILEVEL_LOOKUP: 0
  pool:
    vmImage: 'ubuntu-18.04'
  steps:

  # We are 10GB space-constrained on the Azure Pipelines CI system so clean up what we can 
  # yup we even nuke the .git
  - script: rm -fr .git
    displayName: Clean up space (.git)
    continueOnError: true

  - download: current
    artifact: LinuxAssets

  - task: CopyFiles@2
    displayName: Copy linux native assets to correct folder where the bits contributing to the packages are assembled
    inputs:
      sourceFolder: $(Pipeline.Workspace)/LinuxAssets
      targetFolder: $(Build.SourcesDirectory)/bin/obj/packprep/$(BuildConfig)
  
  - script: rm -fr  $(Pipeline.Workspace)/LinuxAssets
    displayName: Free up space (linux assets in workspace)

  - script: dotnet pack -c $(BuildConfig) --no-build -v:n /p:SkipNative=true /p:SkipTests=true /p:IncludeTorchSharpPackage=false /p:IncludeLibTorchCpuPackage=false /p:IncludeLibTorchCudaPackages=true src/TorchSharp/TorchSharp.csproj
    displayName: Create Packages

  # We are 10GB space-constrained on the Azure Pipelines CI system so clean up what we can 
  - script: rm -fr bin/obj
    displayName: Clean up space (bin/obj)
    continueOnError: true

  - task: CopyFiles@2
    displayName: Copy packaged assets to staging folder
    inputs:
      sourceFolder: $(Build.SourcesDirectory)/bin/packages/$(BuildConfig)
      targetFolder: $(Build.ArtifactStagingDirectory)
 
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: packages
  

  # Push packages to feed
  #
  # Doing these one by one as we're getting a lot of failures pushing them
  # Also replaying them multiple times for the same reason
  #
  - task: NuGetAuthenticate@0
    displayName: 'NuGet Authenticate'


  # push the Linux Cuda packages 
  - task: NuGetCommand@2
    displayName: 'NuGet push (cuda linux-x64)'
    inputs:
      command: push
      packagesToPush:  '$(Build.ArtifactStagingDirectory)/**/*cuda*linux-x64*.nupkg'
      publishVstsFeed: 'TorchSharp/packages2'
      allowPackageConflicts: true
      # often fails - try but ignore the error until we sort it out
    continueOnError: true

  # push the Linux Cuda packages 
  - task: NuGetCommand@2
    displayName: 'NuGet push (cuda linux-x64)'
    inputs:
      command: push
      packagesToPush:  '$(Build.ArtifactStagingDirectory)/**/*cuda*linux-x64*.nupkg'
      publishVstsFeed: 'TorchSharp/packages2'
      allowPackageConflicts: true
      # often fails - try but ignore the error until we sort it out
    continueOnError: true

  # push the Linux Cuda packages 
  - task: NuGetCommand@2
    displayName: 'NuGet push (cuda linux-x64)'
    inputs:
      command: push
      packagesToPush:  '$(Build.ArtifactStagingDirectory)/**/*cuda*linux-x64*.nupkg'
      publishVstsFeed: 'TorchSharp/packages2'
      allowPackageConflicts: true
      # often fails - try but ignore the error until we sort it out
    continueOnError: true

  # push the Linux Cuda packages 
  - task: NuGetCommand@2
    displayName: 'NuGet push (cuda linux-x64)'
    inputs:
      command: push
      packagesToPush:  '$(Build.ArtifactStagingDirectory)/**/*cuda*linux-x64*.nupkg'
      publishVstsFeed: 'TorchSharp/packages2'
      allowPackageConflicts: true
      # often fails - try but ignore the error until we sort it out
    continueOnError: true
